/********************************************************************
 * Copyright (C) 2010 Aricent Inc . All Rights Reserved]                              *
 * $Id: cfmcmd.def,v 1.8 2021/09/02 08:49:56 siva Exp $
 *
 *******************************************************************/

/************************ECFM CONFIGURATION MODE COMMANDS*********************/

/*****************************************************************************/
/*                        Configuration COMMANDS                             */
/*****************************************************************************/
DEFINE GROUP: ECFM_GLBCFG_CMDS

COMMAND : set ethernet-cfm oui <oui>
ACTION  :
{
    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_OUI, NULL, $3);
}

SYNTAX  : set ethernet-cfm oui <aa:aa:aa>
PRVID   : 15
HELP    : Configure Organization Unit Identifier (OUI).
CXT_HELP: set Configures the parameters|
          ethernet-cfm Ethernet CFM configuration|
          oui Organization unit identifier configuration|
          aa:aa:aa OUI value|  
          <CR> Configure Organization Unit Identifier (OUI).

COMMAND : no ethernet-cfm oui
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_NO_OUI);
}

SYNTAX  : no ethernet-cfm oui
PRVID   : 15
HELP    : Sets Organization Unit Identifier (OUI) to default value (i.e. Switch Base Mac address).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet-cfm Ethernet CFM configuration|
          oui Organization unit identifier configuration|
          <CR> Sets Organization Unit Identifier (OUI) to default value (i.e. Switch Base Mac address).

END GROUP

/*****************************************************************************/
/*                        ECFM Global configuration COMMANDS                 */
/*****************************************************************************/

DEFINE GROUP:ECFM_CFG_CMDS

COMMAND : ethernet cfm enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_CFM,
                         NULL);
}

SYNTAX  : ethernet cfm enable
PRVID   : 15
HELP    : Enables connectivity fault management (CFM) processing globally on a device.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          enable Enables cfm processing|
          <CR> Enables connectivity fault management (CFM) processing globally on a device.
 
COMMAND : no ethernet cfm enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_CFM,
                         NULL);
}

SYNTAX  : no ethernet cfm enable
PRVID   : 15
HELP    : Disables CFM processing globally on a device.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Ethernet configuration|
          cfm CFM related configuration|
          enable Enables cfm processing|
          <CR> Disables CFM processing globally on a device.

COMMAND : ethernet cfm offload
ACTION  : 
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CCM_OFFLOAD_ENABLE,
                         NULL);
}

SYNTAX  : ethernet cfm offload
PRVID   : 15
HELP    : Enables CCM Offloading on all the MEPS in the system.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          offload CCM offloading related configuration|
          <CR> Enables CCM Offloading on all the MEPS in the system.


COMMAND : no ethernet cfm offload
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CCM_OFFLOAD_DISABLE,
                         NULL);
}
SYNTAX  : no ethernet cfm offload
PRVID   : 15
HELP    : Disables CFM Offloading on all the MEPs.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures ethernet|
          cfm CFM related configuration|
          offload CFM offloading related configuration|
          <CR> Disables CfM Offloading on all the MEPs.

 COMMAND : ethernet cfm mclag-mep-shutdown {enable | disable}
 ACTION  :
 {
     if ($3 != NULL)
     {
         cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_MCLAG_MEP_SHUTDOWN, NULL, ECFM_ENABLE);
     }
     else
     {
         cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_MCLAG_MEP_SHUTDOWN, NULL, ECFM_DISABLE);
     }
 }
 SYNTAX  : ethernet cfm mclag-mep-shutdown {enable | disable}
 PRVID   : 15
 HELP    : Set the Up-Mep on a standby McLag node to act as administratively up or down
 CXT_HELP: ethernet Configures ethernet |
           cfm CFM related configuration |
           mclag-mep-shutdown Up-Mep on a standby McLag node related configuration |
           enable Administratively enable the Up-Mep on a standby McLag node |
           disable Administratively disable the Up-Mep on a standby McLag node |
           <CR> Set the Up-Mep on a standby McLag node to act as administratively up or down

 COMMAND : ethernet cfm propagate-hold-time {default | <integer(0-60)>}
 ACTION  :
 {
     UINT4       u4HoldTime = 0;
     if ($3 != NULL)
     {
         u4HoldTime = 1;
     }
     else
     {
         u4HoldTime = *(UINT4 *)$4;
     }
     cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_MCLAG_MEP_FAULT_HOLDTIME, NULL, u4HoldTime);
 }
 SYNTAX  : ethernet cfm propagate-hold-time {default | <holdtime(0-60)>}
 PRVID   : 15
 HELP    : Set the hold time in seconds to propagate faults from a Mep on a McLag Node
CXT_HELP: ethernet Configures ethernet |
          cfm CFM related configuration |
          propagate-hold-time Hold Time before propagating the faults by Mep on a McLag node |
          default Default Hold Time (1s) |
          0-60 Hold timer value in seconds |
          <CR> Set the hold time in seconds to propagate faults from a Mep on a McLag Node


COMMAND : ethernet cfm cc {domain <string(43)> | level <string>} [{service <string(43)> | vsi <string> | vlan <string> | service-instance <integer(256-16777214)>}] [interval {three-hundred-hertz | ten-ms | hundred-ms | one-sec | ten-sec | one-min | ten-min}] 
[role {fault-management | performance-monitoring | protection-switching}]
ACTION  :
{
   UINT4       u4Status = 0;
   UINT4       u4Interval = 0;
    if ($23 != NULL)
    {
        if ($24 != NULL)
        {
            u4Status = CLI_ECFM_CC_ROLE_FM;
        }
        else if ($25 != NULL)
        {
            u4Status = CLI_ECFM_CC_ROLE_PM;
        }
        else if ($26 != NULL)
        {
            u4Status = CLI_ECFM_CC_ROLE_PS;
        }
    }
    if ($15 != NULL)
    {
         if ($16 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_300Hz;
         }
              else if ($17 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_10_Ms;                 
         }
              else if ($18 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_100_Ms;                 
         }               
              else if ($19 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_1_S;                 
         }
              else if ($20 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_10_S;                 
         }
              else if ($21 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_1_MIN;                 
         }
              else if ($22 != NULL)
         {
             u4Interval = CLI_ECFM_CCM_INTERVAL_10_MIN;                 
         }
    }
    if ($3 != NULL)
    {
        if ($7 != NULL)
        {
           if($15 != NULL) 
           {
                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_SET_CC_INT,
                            NULL, $4, $8, u4Interval);
		        }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_DOM_SER_SET_CC_INT_ROLE, NULL, 
                            $4, $8, u4Interval, u4Status);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_SET_CC_ROLE, 
                        NULL, $4, $8, u4Status);
            }
        }
        else if ($9 != NULL)
        {
         if ($15 != NULL)
            {
                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_SET_CC_INT,
                            NULL, $4, $10, u4Interval);
                }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_DOM_VSI_SET_CC_INT_ROLE, NULL,
                            $4, $10, u4Interval, u4Status);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_SET_CC_ROLE,
                        NULL, $4, $10, u4Status);
            } 
        }
        else if ($11 != NULL) 
        {
            if ($15 != NULL)
            {
                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_SET_CC_INT,
                            NULL, $4, $12, u4Interval);
                }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_DOM_VLAN_SET_CC_INT_ROLE, NULL, 
                            $4, $12, u4Interval, u4Status);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_SET_CC_ROLE, 
                        NULL, $4, $12, u4Status);
            } 
        }
        else if ($13 != NULL) 
        {
            if ($15 != NULL)
            {
           
                 if ($23 == NULL)
                 {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_SET_CC_INT,
                            NULL, $4, $14, u4Interval);
                 }                      
                 else
                 {
                      cli_process_ecfm_config_cmd (CliHandle, 
                                   CLI_ECFM_DOM_ISID_SET_CC_INT_ROLE, NULL, 
                                   $4, $14, u4Interval, u4Status);
                 }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_SET_CC_ROLE, 
                        NULL, $4, $14, u4Status);
		    }
       }
       else
       {
            if ($15 != NULL)
            {
                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_SET_CC_INT, NULL, 
                            $4, u4Interval);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_SET_CC_INT_ROLE, NULL, 
                            $4, u4Interval, u4Status);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_SET_CC_ROLE, NULL, 
                        $4, u4Status);
            }
       }
    }
    /* Level */
    else
    {
        /* service */
        if ($7 != NULL)
        {
            if ($15 != NULL)
            {

                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_SER_SET_CC_INT,
                            NULL, $6, $8, u4Interval);
                }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_LEV_SER_SET_CC_INT_ROLE, NULL, 
                            $6, $8, u4Interval, u4Status);
                }
           }
           else
           {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_SER_SET_CC_ROLE, 
                        NULL, $6, $8, u4Status);
           }
        }
        /* Vsi */
        else if ($9 != NULL)
        {
            if ($15 != NULL)
            {

                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_SET_CC_INT,
                            NULL, $6, $10, u4Interval);
                }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_LEV_VSI_SET_CC_INT_ROLE, NULL, 
                            $6, $10, u4Interval, u4Status);
                }
           }
           else
           {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_SET_CC_ROLE, 
                        NULL, $6, $10, u4Status);
           }
        }
        /* Vlan */
        else if ($11 != NULL) 
        {
            if ($15 != NULL)
            {

                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_SET_CC_INT,
                            NULL, $6, $12, u4Interval);
                }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_LEV_VLAN_SET_CC_INT_ROLE, NULL, 
                            $6, $12, u4Interval, u4Status);
                }
           }
           else
           {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_SET_CC_ROLE, 
                        NULL, $6, $12, u4Status);
           }
        }
        else if ($13 != NULL) 
        {
#ifdef PBB_WANTED            
            if ($15 != NULL)
            {
                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_SET_CC_INT,
                            NULL, $6, $14, u4Interval);
                }                      
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, 
                            CLI_ECFM_LEV_ISID_SET_CC_INT_ROLE, NULL, 
                            $6, $14, u4Interval, u4Status);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_SET_CC_ROLE, 
                        NULL, $6, $14, u4Status);
            }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
        else
        {
            if ($15 != NULL)
            {
                if ($23 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_SET_CC_INT, NULL, 
                            $6, u4Interval);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_SET_CC_INT_ROLE, NULL, 
                            $6, u4Interval, u4Status);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_SET_CC_ROLE, NULL, 
                        $6, u4Status);
            }
       }
   }
}
SYNTAX  : ethernet cfm cc {domain <domain-name> | level <a,b,c-d>}
[service <service-name> | vsi <vsi_id> | vlan {<vlan-id/vfi-id> | vlan-list} | service-instance <integer(256-16777214)>]
[interval {three-hundred-hertz | ten-ms |
hundred-ms | one-sec | ten-sec | one-min | ten-min}] 
[role {fault-management | performance-monitoring | protection-switching}]
PRVID   : 15
HELP    : Sets parameters (i.e. Interval and Role) for continuity check messages (CCM). The level and vlan identifies the Service (Maintenance Association) to which the configuration applies. Vlan if not specified, sets interval and role at the specified level(s) for Vlan unaware services (Maintenance Association) only.Level range is from 0 to 7 and Vlan range is from 1 to 4094.
CXT_HELP : ethernet Configures Ethernet|
           cfm CFM related configuration|
           cc Continuity check messages related configuration|
           domain Domain related configuration|
           <string(43)> Domain name|
           level Indicates maintenance level for configuration|
           (0-7) List of maintenance value|
           service Service type related configuration|
           <string(43)> Service name| 
           vsi VSI related configuration|
           vsiid The range (4100-65535) is for VSI ID |
           vlan VLAN related configuration|
           vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI|
           service-instance Service instance configuration related information|
           (256-16777214) Service instance value|
           interval Interval between CCM transmission|
           three-hundred-hertz Value is represented as one third of milliseconds| 
           ten-ms Value is represented as multiples of ten milliseconds|
           hundred-ms Value is represented as multiples of hundred milliseconds|
           one-sec Value is represented in seconds|
           ten-sec Value is represented as multiples of ten seconds|
           one-min Value is represented in minutes|
           ten-min Value is represented as multiples of ten minutes|
           role Role details|
           fault-management ETH-CC is used for fault management| 
           performance-monitoring ETH-CC is used for performance monitoring| 
           protection-switching ETH-CC is used for protection switching|
           <CR> Sets parameters (i.e. Interval and Role) for continuity check messages (CCM). The level and vlan identifies the service (Maintenance Association) to which the configuration applies.Vlan if not specified, sets interval and role at the specified level(s) for Vlan unaware services (Maintenance Association)only.Level range is from 0 to 7 and Vlan range is from 1 to 4094.

COMMAND : no ethernet cfm cc {domain <string(43)> | level  <string>}
[{service <string(43)> | vsi <string> | vlan  <string> | service-instance <integer(256-16777214)>}] [interval] [role]
ACTION  :
{
    if ($4 != NULL)
    {
        if ($8 != NULL)
        {
            if ($14 != NULL)
            {
                if ($15 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_RESET_CC_INT, NULL, 
                            $5, $9);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_RESET_CC_INT_ROLE, NULL, 
                            $5, $9);
                }
            }
            else
            {
                if ($15 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_RESET_CC_ROLE, NULL, 
                            $5, $9);
                }                      
            }
        }
        else if ($10 != NULL)
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_RESET_CC_INT, NULL, 
                            $5, $11);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_RESET_CC_INT_ROLE, NULL, 
                            $5, $11);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_RESET_CC_ROLE, NULL, 
                            $5, $11);
                }                      
            }
        }
        else if ($12 != NULL) 
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_RESET_CC_INT, NULL, 
                            $5, $13);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_RESET_CC_INT_ROLE, NULL, 
                            $5, $13);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_RESET_CC_ROLE, NULL, 
                            $5, $13);
                }                      
            }
        }
        else if ($14 != NULL) 
        {
#ifdef PBB_WANTED
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_RESET_CC_INT, NULL, 
                            $5, $15);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_RESET_CC_INT_ROLE, NULL, 
                            $5, $15);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_RESET_CC_ROLE, NULL, 
                            $5, $15);
                }                      
            }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
        else
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_RESET_CC_INT, NULL, 
                            $5);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_RESET_CC_INT_ROLE, NULL, 
                            $5);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_RESET_CC_ROLE, NULL, 
                        $5);
            }
        }
    }
    else
    {
        if ($8 != NULL)
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_SER_RESET_CC_INT, NULL, 
                            $7, $9);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_SER_RESET_CC_INT_ROLE, NULL, 
                            $7, $9);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_SER_RESET_CC_ROLE, NULL, 
                            $7, $9);
                }                      
            }
        }
        else if ($10 != NULL)
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_RESET_CC_INT, NULL, 
                            $7, $11);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_RESET_CC_INT_ROLE, NULL, 
                            $7, $11);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_RESET_CC_ROLE, NULL, 
                            $7, $11);
                }                      
            }
        }
        else if ($12 != NULL) 
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_RESET_CC_INT, NULL, 
                            $7, $13);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_RESET_CC_INT_ROLE, NULL, 
                            $7, $13);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_RESET_CC_ROLE, NULL, 
                            $7, $13);
                }
            }
        }
        else if ($14 != NULL) 
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_RESET_CC_INT, NULL, 
                            $7, $15);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_RESET_CC_INT_ROLE, NULL, 
                            $5, $15);
                }
            }
            else
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_RESET_CC_ROLE, NULL, 
                            $5, $15);
                }                      
            }
        }
        else
        {
            if ($16 != NULL)
            {
                if ($17 == NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_RESET_CC_INT, NULL, 
                            $7);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_RESET_CC_INT_ROLE, NULL, 
                            $7);
                }
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_RESET_CC_ROLE, NULL, 
                        $7);
            }
        }
    }
}
SYNTAX  : no ethernet cfm cc {domain <domain-name> | level <a,b,c-d>}
[{service <service-name> | vsi <string> | vlan <vlan-id/vfi-id> | service-instance <integer(256-16777214)>}]
[interval] [role]
PRVID   : 15
HELP    : Sets continuity check messages (CCM) interval and role parameter to the default value (i.e. 60000 milliseconds and Fault-Management respectively) for the MA at the specified level and vlan. Vlan if not specified, sets (CCM) interval and role at the specified level(s) for Vlan unaware services (Maintenance Association) only. Level range is from 0 to 7 and Vlan range is from 1 to 4094.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value| 
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          cc Continuity check messages related configuration|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service  Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsiid The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI|
          service-instance Service instance configuration related information|
          (256-16777214)Service instance value|
          interval Interval between CCM transmission|
          role Role details|
          <CR> Sets continuity check messages (CCM) interval and role parameter to the default value (i.e. 60000 milliseconds and Fault-Management respectively) for the MA at the specified level and vlan. Vlan if not specified, sets (CCM) interval and role at the specified level(s) for Vlan unaware services (Maintenance Association) only.Level range is from 0 to 7 and Vlan range is from 1 to 4094.

COMMAND : ethernet cfm cc enable {domain <string(43)> | level <string>} 
[{service <string(43)> | vsi <string> | vlan <string> | service-instance <integer(256-16777214)>}] 
ACTION  :
{
    if ($4 != NULL)
    {
        if ($8 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_CC_CONF_ENABLE_PARAM, NULL, 
                    $5, $9);
        }                      
        else if ($10 != NULL)
       {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_CC_CONF_ENABLE_PARAM, NULL, 
                    $5, $11);
       }                      
        else if ($12 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_CC_CONF_ENABLE_PARAM, NULL, 
                    $5, $13);
       }                      
        else if ($14 != NULL)
        {
#ifdef PBB_WANTED            
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_CC_CONF_ENABLE_PARAM, NULL, 
                                         $5, $15);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif            
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_CC_CONF_ENABLE_PARAM, NULL, 
                                        $5);
       }
}
    else
    {
        if ($8 != NULL)
        {
            CliPrintf (CliHandle, "\r%% Invalid List of Arguments\r\n");
        }                      
        else if ($10 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_CC_CONF_ENABLE_PARAM, NULL, 
                    $7, $11);
        }
        else if ($12 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_CC_CONF_ENABLE_PARAM, NULL, 
                    $7, $13);
        }
        else if ($14 != NULL)
        {
#ifdef PBB_WANTED
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_CC_CONF_ENABLE_PARAM, NULL, 
                                         $7, $15);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_CC_CONF_ENABLE_PARAM, NULL, 
                    $7);
        }
    }
}
SYNTAX  : ethernet cfm cc enable {domain <domain-name> | level <a,b,c-d>} 
[service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance <integer(256-16777214)>]
PRVID   : 15
HELP    : Enables the transmission of continuity check messages (CCMs). The level and vlan identifies the Maintenance End Points (MEPs) to which the configuration applies. Vlan if not specified, enables the transmission of CCMs at the specified level(s) for Vlan unaware MEPs only. Level range is from 0 to 7 and Vlan range is from 1 to 4094.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          cc Continuity check messages related configuration|
          enable Enables transmission of ccm|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI|
          service-instance Service instance configuration related information|
         (256-16777214)Service instance value|
          <CR> Enables the transmission of continuity check messages (CCMs). The level and vlan identifies the Maintenance End Points (MEPs) to which the configuration applies. Vlan if not specified, enables the transmission of CCMs at the specified level(s) for Vlan unaware MEPs only. Level range is from 0 to 7 and Vlan range is from 1 to 4094.

COMMAND : no ethernet cfm cc enable {domain <string(43)> | level <string>} 
[{service <string(43)> | vsi <string> | vlan <string> | service-instance <integer(256-16777214)>}] 
ACTION  :
{
    if ($5 != NULL)
    {
        if ($9 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_SER_CC_CONF_DISABLE_PARAM, NULL, 
                    $6, $10);
        }                      
        else if ($11 != NULL)
       {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VSI_CC_CONF_DISABLE_PARAM, NULL,
                    $6, $12);
       }       
        else if ($13 != NULL)
	   {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_VLAN_CC_CONF_DISABLE_PARAM, NULL, 
                    $6, $14);
       }       
        else if ($15 != NULL)
	   {
#ifdef PBB_WANTED
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_ISID_CC_CONF_DISABLE_PARAM, NULL, 
                    $6, $16);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
	   }
       else
       {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOM_UNAWARE_CC_CONF_DISABLE_PARAM, NULL, 
                             $6);
       }
}
    else
    {
        if ($9 != NULL)
        {
            CliPrintf (CliHandle, "\r%% Invalid List of Arguments\r\n");

        }                      
        else if ($11 != NULL)
        {
            CliPrintf (CliHandle, "\r $12 %d \n", *(UINT4*)$12);
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VSI_CC_CONF_DISABLE_PARAM, NULL, 
                    $8, $12);
        }
        else if ($13 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_VLAN_CC_CONF_DISABLE_PARAM, NULL, 
                    $8, $14);
        }
        else if ($15 != NULL)
        {
#ifdef PBB_WANTED
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_ISID_CC_CONF_DISABLE_PARAM, NULL, 
                    $8, $16);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LEV_UNAWARE_CC_CONF_DISABLE_PARAM, NULL, 
                    $8);
        }
    }
}
SYNTAX  : no ethernet cfm cc enable {domain <domain-name> | level <a,b,c-d>} 
[service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance <integer(256-16777214)>]
PRVID   : 15
HELP    : Disables the transmission of continuity check messages (CCM).The level and Vlan identifies the Maintenance End Point (MEP) to which the configuration applies. Vlan if not specified, disables the transmission of CCMs at the specified level(s) for Vlan unaware MEPs only. Level range is from 0 to 7 and Vlan range is from 1 to 4094.
CXT_HELP :no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          cc Continuity check messages related configuration|
          enable Enables transmission of ccm|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI|
          service-instance Service instance configuration related information|
          (256-16777214)Service instance value|
          <CR> Disables the transmission of continuity check messages (CCM).The level and Vlan identifies the Maintenance End Point (MEP) to which the configuration applies. Vlan if not specified, disables the transmission of CCMs at the specified level(s) for Vlan unaware MEPs only. Level range is from 0 to 7 and Vlan range is from 1 to 4094

COMMAND : ethernet cfm domain [format {dns-like-name | mac-addr | char-string | none}] name <string(43)> level <integer(0-7)> 
ACTION  :
{
   UINT4    u4MdFormat = 0;
   if ($4 != NULL)
   {
      u4MdFormat = CLI_ECFM_MD_NAME_TYPE_DNS_LIKE_NAME;
   }
   else if ($5 != NULL)
   {
      u4MdFormat = CLI_ECFM_MD_NAME_TYPE_MAC_ADDR;
   }
   else if ($7 != NULL)
   {
      u4MdFormat = CLI_ECFM_MD_NAME_TYPE_NONE;
   }
   else
   {
      u4MdFormat = CLI_ECFM_MD_NAME_TYPE_CHAR_STRING;
   }
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOMAIN_CREATE, NULL,
                                $9, $11, u4MdFormat);
}

SYNTAX  : ethernet cfm domain [format {dns-like-name | mac-addr | char-string | none}] name <domain-name> level <level-id(0-7)> 
PRVID   : 15
HELP    : Defines a connectivity fault management (CFM) Maintenance Domain (MD) at a particular maintenance level and to put the router in Ethernet CFM configuration mode, where parameters specific to the maintenance domain can be set.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          domain Domain related configuration|
          format Domain type related configuration|
          dns-like-name Domain name like string related configuration| 
          mac-addr MAC address format [mac-addr + 2 octet Integer] - aa:aa:aa:aa:aa:aa:bbbb|
          char-string Sets the domain string as RFC2579 Display string|
          none Domain name should be none or NONE|
          name Domain name related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          <CR> Defines a connectivity fault management (CFM) Maintenance Domain (MD) at a particular maintenance level and to put the router in Ethernet CFM configuration mode, where parameters specific to the maintenance domain can be set.

COMMAND : no ethernet cfm domain [format {dns-like-name | mac-addr | char-string | none}] name <string(43)> level <integer(0-7)>
ACTION  :
{
        INT4    i4MdFormat = 0;

        if ($5 != NULL)
        {
            i4MdFormat = CLI_ECFM_MD_NAME_TYPE_DNS_LIKE_NAME;
        }
        else if ($6 != NULL)
        {
            i4MdFormat = CLI_ECFM_MD_NAME_TYPE_MAC_ADDR;
        }
        else if ($8 != NULL)
        {
            i4MdFormat = CLI_ECFM_MD_NAME_TYPE_NONE;
        }
        else 
        {
            i4MdFormat = CLI_ECFM_MD_NAME_TYPE_CHAR_STRING;
        }

        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOMAIN_DELETE, NULL, 
                                     $10, $12, i4MdFormat);
}

SYNTAX  : no ethernet cfm domain [format {dns-like-name | mac-addr | char-string | none}] name <domain-name> level <level-id(0-7)>
PRVID   : 15
HELP    : Deletes a connectivity fault management (CFM) maintenance domain (MD).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          domain Domain related configuration|
          format Domain type related configuration|
          dns-like-name Domain name like string related configuration| 
          mac-addr MAC address|
          char-string Sets the domain string as RFC2579 Display string|
          none Domain name should be none or NONE|
          name Domain name related configuration|
          <string(43)> Domain name|        
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          <CR> Deletes a connectivity fault management (CFM) maintenance domain (MD).

COMMAND : ethernet cfm default-domain vlan <vlan_vfi_id> ([level <integer(0-7)>][mip-creation-criteria {none | explicit | defer | default}][sender-id-permission {none |chassis | manage | chassis-mgt-address | defer }])
ACTION  :
{
   INT4 i4Criteria = 0;
   INT4 i4IdPermission = 0;
   INT4  i4Level = 0;
   UINT4 u4Mask = 0;
   
   if ($5 != NULL)
   {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_LEVEL;
       i4Level = *(INT4 *) $6;
   }

      if ($7 != NULL)
      {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_CRITERIA;
         if ($8 != NULL)
         {
            i4Criteria = ECFM_MHF_CRITERIA_NONE;
         }
         else if ($9 != NULL)
         {
            i4Criteria = ECFM_MHF_CRITERIA_EXPLICIT;
         }
         else if ($10 != NULL)
         {
            i4Criteria = ECFM_MHF_CRITERIA_DEFER;
         }
         else
         {
           i4Criteria = ECFM_MHF_CRITERIA_DEFAULT;
         }
            }
           
         if ($12 != NULL)
         {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_SID;
            if ($13 != NULL)
            {
                i4IdPermission = ECFM_SENDER_ID_NONE;
            }
            else if ($14 != NULL)
            {
               i4IdPermission = ECFM_SENDER_ID_CHASSIS;
            }
            else if ($15 != NULL)
            {
               i4IdPermission = ECFM_SENDER_ID_MANAGE;
            }
            else if ($16 != NULL)
            {
               i4IdPermission = ECFM_SENDER_ID_CHASSID_MANAGE;
            }
            else
            {
               i4IdPermission = ECFM_SENDER_ID_DEFER;
            }
         }
   
            cli_process_ecfm_config_cmd (CliHandle,
                                CLI_ECFM_DEFAULT_DOMAIN_VLAN, NULL, 
                                $4, i4Level, i4Criteria, i4IdPermission, u4Mask);
} 
SYNTAX  : ethernet cfm default-domain vlan <vlan-id/vfi-id> ([level <level (0-7)>] [mip-creation-criteria {none | explicit | defer | default}] [sender-id-permission {none |chassis | manage | chassis-mgt-address | defer }])
PRVID   : 15
HELP    : Sets the parameters of default Maintenance Domain (MD) Level, to control MHF creation at the VLAN Ids which are not attached to any Service (Maintenance Association) and SenderID TLV transmission by these created MHFs.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration| 
          default-domain Default maintenance domain related configuration|
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          none No MHFs can be created for this VID| 
          explicit Creates MHFs for this VID only on bridge ports through which the VID can pass|
          defer Creation of MHFs is determined by corresponding Maintenance Domain variable|
          default Creates  MHFs on this VID on any bridge port through which the VID can pass|
          sender-id-permission Configures information related to sender-id TLV transmission|
          none Sender ID TLV is not to be sent|
          chassis Sends chassis ID Length,ID,subtype and chassis ID fields of sender ID TLV|
          manage Sends management Address Length and Management Address of sender ID TLV|
          chassis-mgt-address Sends chassis ID Length,ID,subtype,Management Address Length and Management Address|
          defer Sender ID TLV are determined by corresponding Maintenance Domain variable|
          <CR>  Sets the parameters of default Maintenance Domain (MD) Level, to control MHF creation at the VLAN Ids which are not attached to any service (Maintenance Association) and SenderID TLV transmission by these created MHFs.

COMMAND : no ethernet cfm default-domain vlan <vlan_vfi_id> ([level] [mip-creation-criteria] [sender-id-permission])
ACTION  :
{
    UINT4      u4Mask = 0;
    
    if ($6 != NULL)
            {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_LEVEL; 
            }
           
    if ($7 != NULL)
            {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_CRITERIA;
            }

    if ($8 != NULL)
            {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_SID;
   }
    
    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_NO_DEFAULT_DOMAIN_VLAN, 
                                 NULL, $5, u4Mask);
} 
SYNTAX  : no ethernet cfm default-domain vlan <vlan-id/vfi_id> ([level] [mip-creation-criteria] [sender-id-permission])
PRVID   : 15
HELP    : Resets the parameters of default maintenance domain (MD) Level, MIP creation criteria and sender-id permission at the VLAN level.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          default-domain Default maintenance domain related configuration|
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          level Indicates maintenance level for configuration|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          sender-id-permission Configures information related to sender-id TLV transmission|
          <CR> Resets the parameters of default maintenance domain (MD) Level, MIP creation criteria and sender-id permission at the VLAN level.


COMMAND : ethernet cfm default-domain service-instance <integer(256-16777214)> ([level <integer(0-7)>][mip-creation-criteria {none | explicit | defer | default}][sender-id-permission {none |chassis | manage | chassis-mgt-address | defer }])
ACTION  :
{
   INT4 i4Criteria = 0;
   INT4 i4IdPermission = 0;
   INT4 i4Level = 0;
   UINT4 u4Mask = 0;
   
   if ($5 != NULL)
   {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_LEVEL;
       i4Level = *(INT4 *) $6;
   }

      if ($7 != NULL)
      {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_CRITERIA;
         if ($8 != NULL)
         {
            i4Criteria = ECFM_MHF_CRITERIA_NONE;
         }
         else if ($9 != NULL)
         {
            i4Criteria = ECFM_MHF_CRITERIA_EXPLICIT;
         }
         else if ($10 != NULL)
         {
            i4Criteria = ECFM_MHF_CRITERIA_DEFER;
         }
         else
         {
           i4Criteria = ECFM_MHF_CRITERIA_DEFAULT;
         }
            }
           
         if ($12 != NULL)
         {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_SID;
            if ($13 != NULL)
            {
                i4IdPermission = ECFM_SENDER_ID_NONE;
            }
            else if ($14 != NULL)
            {
               i4IdPermission = ECFM_SENDER_ID_CHASSIS;
            }
            else if ($15 != NULL)
            {
               i4IdPermission = ECFM_SENDER_ID_MANAGE;
            }
            else if ($16 != NULL)
            {
               i4IdPermission = ECFM_SENDER_ID_CHASSID_MANAGE;
            }
            else
            {
               i4IdPermission = ECFM_SENDER_ID_DEFER;
            }
         }
   
            cli_process_ecfm_config_cmd (CliHandle,
                                CLI_ECFM_DEFAULT_DOMAIN_ISID,
                                NULL, $4, i4Level, i4Criteria, i4IdPermission,
                                u4Mask); 
}
SYNTAX  : ethernet cfm default-domain service-instance <isid (256-16777214)> ([level <level (0-7)>] [mip-creation-criteria {none | explicit | defer | default}] [sender-id-permission {none |chassis | manage | chassis-mgt-address | defer }])
PRVID   : 15
HELP    : Sets the parameters of default Maintenance Domain (MD) Level, to control MHF creation at the ISIDs which are not attached to any service (Maintenance Association) and SenderID TLV transmission by those MHFs. 
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          default-domain Default maintenance domain related configuration|
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          none No MHFs can be created for this VID|
          explicit Creates MHFs for this VID only on bridge ports through which the VID can pass|
          defer Creation of MHFs is determined by corresponding Maintenance Domain variable|
          default Creates  MHFs on this VID on any bridge port through which the VID can pass|
          sender-id-permission Configures information related to sender-id TLV transmission|
          none Sender ID TLV is not to be sent|
          chassis Sends chassis ID Length,ID,subtype and chassis ID fields of sender ID TLV|
          manage Sends management Address Length and Management Address of sender ID TLV|
          chassis-mgt-address Sends chassis ID Length,ID,subtype,Management Address Length and Management Address|
          defer Sender ID TLV are determined by corresponding Maintenance Domain variable|
          <CR> Sets the parameters of default Maintenance Domain (MD) Level, to control MHF creation at the ISIDs which are not attached to any service (Maintenance Association) and SenderID TLV transmission by those MHFs.

COMMAND : no ethernet cfm default-domain service-instance <integer(256-16777214)> 
          ([level] [mip-creation-criteria] [sender-id-permission])
ACTION  :
{
   UINT4 u4Mask = 0;
    
   if ($6 != NULL)
            {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_LEVEL;
            }
           
   if ($7 != NULL)
            {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_CRITERIA;
            }

   if ($8 != NULL)
            {
       u4Mask |= CLI_MD_DEFAULT_DOMAIN_SID;
            }
   
            cli_process_ecfm_config_cmd (CliHandle,
                                CLI_ECFM_NO_DEFAULT_DOMAIN_ISID, NULL, $5, u4Mask);
}
SYNTAX  : no ethernet cfm default-domain service-instance <isid (256-16777214)> ([level] [mip-creation-criteria] [sender-id-permission])
PRVID   : 15
HELP    : Resets the parameters of default Maintenance Domain (MD) Level, MIP creation criteria and sender-id permission at the ISID Level.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          default-domain Default domain related configuration|
          service-instance Service instance configuration related information|
          (256-16777214)Service instance value|
          level Indicates maintenance level for configuration|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          sender-id-permission Configures information related to sender-id TLV transmission|
          <CR> Resets the parameters of default Maintenance Domain (MD) Level, MIP creation criteria and sender-id permission at the ISID Level.


COMMAND : ethernet cfm default-domain global ([level <integer(0-7)>][mip-creation-criteria {none | explicit | default}][sender-id-permission {none |chassis | manage | chassis-mgt-address }])
ACTION  :
{
 INT4 i4DefCriteria = 0;
 INT4 i4DefIdPermission = 0;
    INT4 i4Level = 0;
    UINT4 u4Mask = 0;

 if ($4 != NULL)
 {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_LEVEL;
        i4Level = *(INT4 *) $5;
    }
    
      if ($6 != NULL)
      {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_CRITERIA;
         if ($7 != NULL)
         {
            i4DefCriteria = ECFM_MHF_CRITERIA_NONE;
         }
         else if ($8 != NULL)
         {
            i4DefCriteria = ECFM_MHF_CRITERIA_EXPLICIT;
         }
         else
         {
           i4DefCriteria = ECFM_MHF_CRITERIA_DEFAULT;
         }
    }
   
         if ($10 != NULL)
         {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_SID;
            if ($11 != NULL)
            {
                i4DefIdPermission = ECFM_SENDER_ID_NONE;
            }
            else if ($12 != NULL)
            {
               i4DefIdPermission = ECFM_SENDER_ID_CHASSIS;
            }
            else if ($13 != NULL)
            {
               i4DefIdPermission = ECFM_SENDER_ID_MANAGE;
            }
            else 
            {
               i4DefIdPermission = ECFM_SENDER_ID_CHASSID_MANAGE;
            }
         }

    cli_process_ecfm_config_cmd (CliHandle, 
                                 CLI_ECFM_DEFAULT_DOMAIN_GLOBAL, NULL, 
                                 i4Level, i4DefCriteria, i4DefIdPermission, u4Mask);
}
SYNTAX  : ethernet cfm default-domain global ([level <level(0-7)>] [mip-creation-criteria {none | explicit | default}] [sender-id-permission {none | chassis | manage | chassis-mgt-address}])
PRVID   : 15
HELP    : Sets the global default Maintenance Domain (MD )parameters to control MIP creation and SenderID TLV transmission by MHFs. 
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          default-domain Default domain related configuration|
          global Global configuration|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          none No MHFs can be created for this VID|
          explicit Creates MHFs for this VID only on bridge ports through which the VID can pass|
          default Creates  MHFs on this VID on any bridge port through which the VID can pass|
          sender-id-permission Configures information related to sender-id TLV transmission|
          none Sender ID TLV is not to be sent|
          chassis Sends chassis ID Length,ID,subtype and chassis ID fields of sender ID TLV|
          manage Sends management Address Length and Management Address of sender ID TLV|
          chassis-mgt-address Sends chassis ID Length,ID,subtype,Management Address Length and Management Address|
          <CR> Sets the global default Maintenance Domain (MD )parameters to control MIP creation and SenderID TLV transmission by MHFs.

           
COMMAND : no ethernet cfm default-domain global ([level] [mip-creation-criteria]
          [sender-id-permission])
ACTION  :
{
    UINT4 u4Mask = 0;
 
    if ($5 != NULL)
            {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_LEVEL;
            }
   
    if ($6 != NULL)
            {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_CRITERIA;
            }
   
    if ($7 != NULL)
            {
        u4Mask |= CLI_MD_DEFAULT_DOMAIN_SID;
            }

    cli_process_ecfm_config_cmd (CliHandle, 
                                 CLI_ECFM_NO_DEFAULT_DOMAIN_GLOBAL, NULL, u4Mask);
}
SYNTAX  : no ethernet cfm default-domain global ([level] [mip-creation-criteria] [sender-id-permission])
PRVID   : 15
HELP    : Resets the global default Maintenance Domain (MD )parameters to control MIP creation and SenderID TLV transmission by MHFs.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          default-domain Default maintenance domain related configuration|
          global Global configuration|
          level level Indicates maintenance level for configuration|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          sender-id-permission Configures information related to sender-id TLV transmission|
          <CR> Resets the global default Maintenance Domain (MD )parameters to control MIP creation and SenderID TLV transmission by MHFs.

COMMAND : ethernet cfm start 
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SYS_CTRL, NULL, ECFM_START); 
}

SYNTAX  : ethernet cfm start 
PRVID   : 15
HELP    : Start Ethernet CFM Module globally on the switch.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          start Starts the feature|
          <CR> Start Ethernet CFM Module globally on the switch.

COMMAND : no ethernet cfm start 
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SYS_CTRL, NULL, ECFM_SHUTDOWN); 
}

SYNTAX  : no ethernet cfm start 
PRVID   : 15
HELP    : Shutdown Ethernet CFM Module globally on the switch.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          start Starts the feature|
          <CR> Shutdown Ethernet CFM Module globally on the switch.

COMMAND : ethernet cfm mip ccm-database
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_MIP_CCM_DB,
                         NULL, ECFM_ENABLE); 
}

SYNTAX  : ethernet cfm mip ccm-database
PRVID   : 15
HELP    : Enables the Ethernet CFM MIP-CCM database maintenance.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          ccm-database CCM database related configuration|
          <CR> Enables the Ethernet CFM MIP-CCM database maintenance.

COMMAND : no ethernet cfm mip ccm-database
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_MIP_CCM_DB,
                         NULL, ECFM_DISABLE); 
}

SYNTAX  : no ethernet cfm mip ccm-database
PRVID   : 15
HELP    : Disables the Ethernet CFM MIP-CCM database maintenance.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          ccm-database CCM database related configuration|
          <CR> Disables the Ethernet CFM MIP-CCM database maintenance.


COMMAND : ethernet cfm mip ccm-database hold-time <integer(24-48)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CCM_DB_SET_HOLDTIME,
                         NULL, $5); 
}

SYNTAX  : ethernet cfm mip ccm-database hold-time <hours(24-48)>
PRVID   : 15
HELP    : Sets Ethernet CFM MIP-CCM database entry maximum age. 
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          ccm-database CCM database related configuration|
          hold-time Time until the Ethernet CFM MIP CCM Database entries will be retained|
          (24-38) Holding time limit|
          <CR> Sets Ethernet CFM MIP-CCM database entry maximum age.


COMMAND : no ethernet cfm mip ccm-database hold-time
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CCM_DB_RESET_HOLDTIME,
                         NULL); 
}

SYNTAX  : no ethernet cfm mip ccm-database hold-time
PRVID   : 15
HELP    : Sets Ethernet CFM MIP-CCM database entry maximum age to the default value (i.e. 24 hours).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          ccm-database CCM database related configuration|
          hold-time Time until the Ethernet CFM MIP CCM Database entries will be retained|
          <CR> Sets Ethernet CFM MIP-CCM database entry maximum age to the default value (i.e. 24 hours).


COMMAND : ethernet cfm mip ccm-database size <integer(1000-10000)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CCM_DB_SET_SIZE,
                         NULL, $5); 
}

SYNTAX  : ethernet cfm mip ccm-database size <entries(1000-10000)>
PRVID   : 15
HELP    : Sets maximum size for the Ethernet CFM MIP-CCM database.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          ccm-database CCM database related configuration|
          size Size of the ccm database|
          (1000-10000) Size entries value|
          <CR> Sets maximum size for the Ethernet CFM MIP-CCM database.


COMMAND : no ethernet cfm mip ccm-database size
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CCM_DB_RESET_SIZE,
                         NULL); 
}

SYNTAX  : no ethernet cfm mip ccm-database size
PRVID   : 15
HELP    : Sets MIP-CCM database size to the default value (i.e. 1000 entries).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          ccm-database CCM database related configuration|
          size Size of the ccm database|
          <CR> Sets MIP-CCM database size to the default value (i.e. 1000 entries).


COMMAND : ethernet cfm loopback cache
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LBR_CACHE,
                         NULL, ECFM_ENABLE); 
}

SYNTAX  : ethernet cfm loopback cache
PRVID   : 15
HELP    : Enables Loopback cache.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          loopback Loopback interface|
          cache Cache related configuration|
          <CR> Enables Loopback cache.


COMMAND : no ethernet cfm loopback cache
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LBR_CACHE,
                         NULL, ECFM_DISABLE); 
}

SYNTAX  : no ethernet cfm loopback cache
PRVID   : 15
HELP    : Disables loopback caching.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          loopback Loopback interface|
          cache Cache related configuration|
          <CR> Disables loopback caching.


COMMAND : ethernet cfm traceroute cache
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LTR_CACHE,
                         NULL, ECFM_ENABLE); 
}

SYNTAX  : ethernet cfm traceroute cache
PRVID   : 15
HELP    : Enables Link trace replies (LTR) caching, by default it is disabled.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          traceroute Trace route related configuration|
          cache Cache related configuration|
          <CR> Enables Link trace replies (LTR) caching, by default it is disabled.

COMMAND : no ethernet cfm traceroute cache
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LTR_CACHE,
                         NULL, ECFM_DISABLE); 
}

SYNTAX  : no ethernet cfm traceroute cache
PRVID   : 15
HELP    : Disables Link trace replies (LTR) caching. Traceroute cache (LTR Table) should be empty before it can be disabled. 
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          traceroute Trace route related configuration|
          cache Cache related configuration|
          <CR> Disables Link trace replies (LTR) caching. Traceroute cache (LTR Table) should be empty before it can be disabled.

COMMAND : ethernet cfm traceroute cache hold-time <integer(1-10080)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LTR_CACHE_SET_HOLDTIME,
                         NULL, $5); 
}

SYNTAX  : ethernet cfm traceroute cache hold-time <minutes(1-10080)>
PRVID   : 15
HELP    : Sets Link trace replies (LTR Table) maximum age. Traceroute caching should be enabled.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          traceroute Trace route related configuration|
          cache Cache related configuration|
          hold-time Time until the Ethernet CFM MIP CCM Database entries will be retained|
          (1-10080) Holding time|
          <CR> Sets Link trace replies (LTR Table) maximum age. Traceroute caching should be enabled.

COMMAND : no ethernet cfm traceroute cache hold-time
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LTR_CACHE_RESET_HOLDTIME,
                         NULL); 
}

SYNTAX  : no ethernet cfm traceroute cache hold-time
PRVID   : 15
HELP    : Sets Link trace replies (LTR Table) maximum age to the default value (i.e. 100 minutes).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          traceroute Trace route related configuration|
          cache Cache related configuration|
          hold-time Time until the Ethernet CFM MIP CCM Database entries will be retained|
          (1-65535) Holding time|
          <CR> Sets Link trace replies (LTR Table) maximum age to the default value (i.e. 100 minutes).

COMMAND : ethernet cfm traceroute cache size <integer(1-4095)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LTR_CACHE_SET_SIZE,
                         NULL, $5); 
}

SYNTAX  : ethernet cfm traceroute cache size <entries(1-4095)>
PRVID   : 15
HELP    : Sets maximum size for the Link trace reply (LTR) table. Traceroute caching should be enabled and cache should be empty.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          traceroute Trace route related configuration|
          cache Cache related configuration| 
          size Size of the LTR table|
          (1-4095) Number of entries that can be stored in LTR table|
          <CR> Sets maximum size for the Link trace reply (LTR) table. Traceroute caching should be enabled and cache should be empty.

COMMAND : no ethernet cfm traceroute cache size
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LTR_CACHE_RESET_SIZE,
                         NULL); 
}

SYNTAX  : no ethernet cfm traceroute cache size
PRVID   : 15
HELP    : Sets the configured size for Link trace reply (LTR) table, to the default value (i.e. 100 entries).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          traceroute Trace route related configuration|
          cache Cache related configuration|
          size Size of the LTR table|
          <CR> Sets the configured size for Link trace reply (LTR) table, to the default value (i.e. 100 entries).

COMMAND : ethernet cfm mip dynamic evaluation
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_IMPLICIT_MIP_EVAL,
                         NULL);
}

SYNTAX  : ethernet cfm mip dynamic evaluation 
PRVID   : 15
HELP    : Enables the implicit evaluation and creation of MIP.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          dynamic Dynamic configuration|
          evaluation Implicit evaluation related configuration|
          <CR> Enables the implicit evaluation and creation of MIP.

COMMAND : no ethernet cfm mip dynamic evaluation
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_IMPLICIT_MIP_EVAL,
                         NULL);
}

SYNTAX  : no ethernet cfm mip dynamic evaluation
PRVID   : 15
HELP    : Disables the implicit evaluation and creation of MIP.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          dynamic Dynamic configuration|
          evaluation Implicit evaluation related configuration|
          <CR> Disables the implicit evaluation and creation of MIP.

COMMAND : ethernet cfm mep crosscheck start-delay <integer(3-100)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_XCHK_DELAY, NULL, $5);
}

SYNTAX  : ethernet cfm mep crosscheck start-delay <delay(3-100)>
PRVID   : 15
HELP    : Configures the number of CCMs to be missed, for which a device waits for the remote maintenance end points(MEPs) to come up.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mep Maintenance end point related configuration|
          crosscheck Crosschecks the number of missed CCM|
          start-delay Minimum amount of delay set before starting the feature|
          (3-100) Delay time|
          <CR> Configures the number of CCMs to be missed, for which a device waits for the remote maintenance end points(MEPs) to come up.
           
COMMAND : no ethernet cfm mep crosscheck start-delay 
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RESET_XCHK_DELAY, NULL);
}

SYNTAX  : no ethernet cfm mep crosscheck start-delay
PRVID   : 15
HELP    : Sets the configured crosscheck start-delay to the default value (i.e. 3CCMs).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mep Maintenance end point related configuration|
          crosscheck Crosschecks the number of missed CCM|
          start-delay Minimum amount of delay set before starting the feature|
          <CR> Sets the configured crosscheck start-delay to the default value (i.e. 3CCMs)          

COMMAND : snmp-server enable traps ethernet cfm
{[rdi-ccm][mac-status][mep-missing][errored-ccm][cross-connect]
[loss-of-continuity][unexpected-period][unexpected-mep][mis-merge]
[unexpected-level][local-link-failure][hardware-failure][software-failure]
[frame-loss][frame-delay][bit-error][ais-condition][lck-condition] | all }
ACTION  :
{
   UINT1 u1EnableEcfmTraps = 0;
   UINT2 u2EnableY1731Traps = 0;
   if ($5 != NULL)
   {
       u1EnableEcfmTraps |= ECFM_RDI_CCM_TRAP;
       u2EnableY1731Traps |= CLI_ECFM_RDI_TRAP;
   }
   if ($6 != NULL)
   {
       u1EnableEcfmTraps |= ECFM_MAC_STATUS_TRAP;
   }
   if ($7 != NULL)
   {
       u1EnableEcfmTraps |= ECFM_REMOTE_CCM_TRAP;
   }
   if ($8 != NULL)
   {
       u1EnableEcfmTraps |= ECFM_ERR_CCM_TRAP;
   }
   if ($9 != NULL)
   {
       u1EnableEcfmTraps |= ECFM_XCONN_CCM_TRAP;
   }

   if ($10 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_LOC_TRAP;
   }
   if ($11 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_UNEXP_PERIOD_TRAP;
   }
   if ($12 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_UNEXP_MEP_TRAP;
   }
   if ($13 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_MISMERGE_TRAP;
   }
   if ($14 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_UNEXP_LEVEL_TRAP;
   }
   if ($15 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_LL_TRAP;
   }
   if ($16 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_HW_TRAP;
   }
   if ($17 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_SW_TRAP;
   }
   if ($18 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_FL_TRAP;
   }
   if ($19 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_FD_TRAP;
   }
   if ($20 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_BIT_ERR_TRAP;
   }
   if ($21 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_AIS_TRAP;
   }
   if ($22 != NULL)
   {
       u2EnableY1731Traps |= CLI_ECFM_LCK_TRAP;
   }
   if ($23 != NULL)
   {
       u1EnableEcfmTraps = ECFM_ALL_TRAP;
       u2EnableY1731Traps = CLI_ECFM_ALL_Y1731_TRAP;
   }

   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_TRAP, NULL,
                                u1EnableEcfmTraps, u2EnableY1731Traps); 
}

SYNTAX : snmp-server enable traps ethernet cfm
{[rdi-ccm][mac-status][mep-missing][errored-ccm][cross-connect]
[loss-of-continuity][unexpected-period][unexpected-mep][mis-merge]
[unexpected-level][local-link-failure][hardware-failure][software-failure]
[frame-loss][frame-delay][bit-error][ais-condition][lck-condition] | all }
PRVID   : 15
HELP    : Enables snmp traps.
CXT_HELP: snmp-server Configures SNMP server related details|
          enable Enables all traps|
          traps Trap related configuration|
          ethernet Configures Ethernet|
          cfm CFM related configuration| 
          rdi-ccm Enables traps for remote MEP defect condition|
          mac-status Mac address status related configuration|
          mep-missing Enables traps for MEP missing defect condition|
          errored-ccm Enables traps when MEP receives atleast one invalid CCM,where CCM interval is not timed out|
          cross-connect Enables traps when MEP receives atleast one CCM from another MAID,where CCM interval is not timed out|
          loss-of-continuity Enables traps for loss of continuity defect condition|
          unexpected-period Enables traps for unexpected period defect condition|
          unexpected-mep Enables traps for unexpected MEP defect condition|
          mis-merge Enables traps for mismerge defect condition|
          unexpected-level Enables traps for MEG level defect condition|
          local-link-failure Enables traps for local link failure defect condition|
          hardware-failure Enables traps for internal hardware failure defect condition|
          software-failure Enables traps for internal software failure defect condition|
          frame-loss Enables traps when calculated frame loss value is greater than configured frame loss threshold value|
          frame-delay Enables traps for when calculated frame delay value is greater than configured frame delay threshold value|
          bit-error Enables traps for bit-error defect condition|
          ais-condition Enables traps for alarm indication defect condition|
          lck-condition Enables traps for locked defect condition|
          all All traps configuration|
          <CR> Enables snmp traps.

COMMAND : no snmp-server enable traps ethernet cfm
{[rdi-ccm][mac-status][mep-missing][errored-ccm][cross-connect][loss-of-continuity]
[unexpected-period][unexpected-mep][mis-merge]
[unexpected-level][local-link-failure][hardware-failure][software-failure]
[frame-loss][frame-delay][bit-error][ais-condition][lck-condition] | all}
ACTION  :
{
   UINT1 u1DisableEcfmTraps = 0;
   UINT2 u2DisableY1731Traps = 0;
   if ($6 != NULL)
   {
       u1DisableEcfmTraps |= ECFM_RDI_CCM_TRAP;
       u2DisableY1731Traps |= CLI_ECFM_RDI_TRAP;
   }
   if ($7 != NULL)
   {
       u1DisableEcfmTraps |= ECFM_MAC_STATUS_TRAP;
   }
   if ($8 != NULL)
   {
       u1DisableEcfmTraps |= ECFM_REMOTE_CCM_TRAP;
   }
   if ($9 != NULL)
   {
       u1DisableEcfmTraps |= ECFM_ERR_CCM_TRAP;
   }
   if ($10 != NULL)
   {
       u1DisableEcfmTraps |= ECFM_XCONN_CCM_TRAP;
   }

   if ($11 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_LOC_TRAP;
   }
   if ($12 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_UNEXP_PERIOD_TRAP;
   }
   if ($13 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_UNEXP_MEP_TRAP;
   }
   if ($14 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_MISMERGE_TRAP;
   }
   if ($15 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_UNEXP_LEVEL_TRAP;
   }
   if ($16 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_LL_TRAP;
   }
   if ($17 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_HW_TRAP;
   }
   if ($18 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_SW_TRAP;
   }
   if ($19 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_FL_TRAP;
   }
   if ($20 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_FD_TRAP;
   }
   if ($21 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_BIT_ERR_TRAP;
   }
   if ($22 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_AIS_TRAP;
   }
   if ($23 != NULL)
   {
       u2DisableY1731Traps |= CLI_ECFM_LCK_TRAP;
   }
   if ($24 != NULL)
   {
       u1DisableEcfmTraps = ECFM_ALL_TRAP;
       u2DisableY1731Traps = CLI_ECFM_ALL_Y1731_TRAP;
   }

   u1DisableEcfmTraps = ~u1DisableEcfmTraps;
   u2DisableY1731Traps = ~u2DisableY1731Traps;
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_TRAP, NULL,
                                u1DisableEcfmTraps, u2DisableY1731Traps); 
}
SYNTAX : no snmp-server enable traps ethernet cfm
{[rdi-ccm][mac-status][mep-missing][errored-ccm][cross-connect][loss-of-continuity]
[unexpected-period][unexpected-mep][mis-merge]
[unexpected-level][local-link-failure][hardware-failure][software-failure]
[frame-loss][frame-delay][bit-error][ais-condition][lck-condition]} | all }
PRVID   : 15
HELP    : Disable snmp traps.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          snmp-server Configures SNMP server related details|
          enable Enables all traps|
          traps Trap related configuration|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          rdi-ccm Enables traps for remote MEP defect condition|
          mac-status Mac status related configuration|
          mep-missing Enables traps for MEP missing defect condition|
          errored-ccm Enables traps when MEP receives atleast one invalid CCM,where CCM interval is not timed out|          cross-connect Enables traps when MEP receives atleast one CCM from another MAID,where CCM interval is not timed out|
          loss-of-continuity Enables traps for loss of continuity defect condition|
          unexpected-period Enables traps for unexpected period defect condition|
          unexpected-mep Enables traps for unexpected MEP defect condition|
          mis-merge Enables traps for mismerge defect condition|
          unexpected-level Enables traps for MEG level defect condition|
          local-link-failure Enables traps for local link failure defect condition|
          hardware-failure Enables traps for internal hardware failure defect condition|
          software-failure Enables traps for internal software failure defect condition|
          frame-loss Enables traps when calculated frame loss value is greater than configured frame loss threshold value|
          frame-delay Enables traps for when calculated frame delay value is greater than configured frame delay threshold value|
          bit-error Enables traps for bit-error defect condition|
          ais-condition Enables traps for alarm indication defect condition|
          lck-condition Enables traps for locked defect condition|
          all All traps configuration|
          <CR> Disable snmp traps.

/*************  Y.1731 : Conf Commands Start ***************/ 

COMMAND : ethernet cfm y1731 enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_Y1731, NULL);
}

SYNTAX  : ethernet cfm y1731 enable  
PRVID   : 15
HELP    : Enables Y.1731 processing globally on a device. For Y.1731 to be enabled, ECFM should be enabled.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          y1731 y1731 related configuration|
          enable Enables y1731 processing|
          <CR>  Enables Y.1731 processing globally on a device. For Y.1731 to be enabled, ECFM should be enabled.

COMMAND : no ethernet cfm y1731 enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_Y1731, NULL);
}

SYNTAX  : no ethernet cfm y1731 enable  
PRVID   : 15
HELP    : Disables Y.1731 processing globally on a device.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          y1731 y1731 related configuration|
          enable Enables y1731 processing|
          <CR> Disables Y.1731 processing globally on a device.

COMMAND : ethernet cfm frame delay buffer size <integer(1-4096)>
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_FD_BUFFER_SIZE, NULL,
   $6);
}

SYNTAX  : ethernet cfm frame delay buffer size <entries(1-4096)>
PRVID   : 15
HELP    : Sets the maximum size for the Frame Delay buffer.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          frame Frame related configuration|
          delay Frame delay related configuration|
          buffer Buffer allocation|
          size Size of the Frame delay buffer|
          (1-4096) Number of entries that can be stored in frame delay buffer|
          <CR> Sets the maximum size for the Frame Delay buffer.         
 

COMMAND : no ethernet cfm frame delay buffer size
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RESET_FD_BUFFER_SIZE, NULL);
}

SYNTAX  : no ethernet cfm frame delay buffer size
PRVID   : 15
HELP    : Sets maximum size for the Frame Delay buffer to the default value (i.e.1024 entries).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          frame Frame related configuration|
          delay Frame delay related configuration|
          buffer Buffer allocation|
          size Size of the Frame delay buffer|
          <CR> Sets maximum size for the Frame Delay buffer to the default value (i.e.1024 entries).

COMMAND : ethernet cfm frame loss buffer size <integer(1-4096)>
ACTION  : 
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_FL_BUFFER_SIZE, NULL,
   $6);
}

SYNTAX  : ethernet cfm frame loss buffer size <entries(1-4096)>
PRVID   : 15
HELP    : Sets the maximum size for the Frame Delay buffer.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          frame Frame related configuration|
          loss Frame loss related configuration|
          buffer Buffer allocation|
          size Size of the Frame delay buffer|
          (1-4096) Number of entries that can be stored in frame delay buffer|
          <CR> Sets the maximum size for the Frame Delay buffer.

COMMAND : no ethernet cfm frame loss buffer size
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RESET_FL_BUFFER_SIZE, NULL);
}

SYNTAX  : no ethernet cfm frame loss buffer size
PRVID   : 15
HELP    : Sets maximum size for the Frame Loss buffer to the default value (i.e.1024 entries).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          frame Frame related configuration|
          loss Frame loss related configuration|
          buffer Buffer allocation|
          size Size of the Frame delay buffer|
          (1-4096) Number of entries that can be stored in frame delay buffer|
          <CR> Sets maximum size for the Frame Loss buffer to the default value (i.e.1024 entries).

COMMAND : ethernet cfm loopback cache ([size <integer(1-4096)>] [hold-time
<integer(1-2880)>])
ACTION  :
{ 
   if ($4 != NULL)
   {
       if ($6 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
           CLI_ECFM_SET_LBRCACHE_SIZE_HOLDTIME, NULL, $5, $7);
       }
       else
       {
           cli_process_ecfm_config_cmd (CliHandle,
           CLI_ECFM_SET_LBRCACHE_SIZE, NULL, $5);
       }
   }
   else 
   {
       if ($6 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
           CLI_ECFM_SET_LBRCACHE_HOLDTIME, NULL, $7);
       }
   }
}

SYNTAX  : ethernet cfm loopback cache ([size <entries(1-4096)>] [hold-time <minutes(1-2880)>])
PRVID   : 15
HELP    : Sets maximum value for size and/or hold-time of the Loopback cache.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          loopback Loopback interface|
          cache Cache related configuration|
          size Size of the loopback cache| 
          (1-4096) Number of entries that can be stored in loopback cache|
          hold-time Time until the Ethernet cfm  mip ccm database entries will be retained|
          (1-2880) Holding time|
          <CR> Sets maximum value for size and/or hold-time of the Loopback cache.


COMMAND : no ethernet cfm loopback cache ([size] [hold-time])
ACTION  :
{	
   if ($5 != NULL)
   {
       if ($6 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_RESET_LBRCACHE_SIZE_HOLDTIME, NULL);
       }
       else
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_RESET_LBRCACHE_SIZE, NULL);
       }
   }
   else 
   {
       if ($6 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_RESET_LBRCACHE_HOLDTIME, NULL);
       }
   }
}

SYNTAX  : no ethernet cfm loopback cache ([size] [hold-time])
PRVID   : 15
HELP    : Sets Loopback Cache size and/or hold-time to the default value.(i.e. Default Size : 1024 entries Default Hold-Time : 1440 minutes).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          loopback Loopback interface|
          cache Cache related configuration|
          size Size of the loopback cache|
          (1-4096) Number of entries that can be stored in loopback cache|
          hold-time Time until the Ethernet cfm mip ccm database entries will be retained|
          (1-2880) Holding time|
          <CR> Sets Loopback Cache size and/or hold-time to the default value (i.e. Default Size : 1024 entries Default Hold-Time : 1440 minutes).

COMMAND : ethernet cfm error-log [{enable | disable}] [size
<integer(1-4096)>]
ACTION  :
{  
   if ($4 != NULL)
   {
       if ($5 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_DISABLE_ERR_LOG_SET_SIZE, NULL, $6);
       }
       else
       {
           cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_ERR_LOG,
                                        NULL);
       }
   }
   else 
   {
       if ($5 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_SET_ERR_LOG_SIZE, NULL, $6);
       }
       else
       {
           cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_ERR_LOG,
                                        NULL);
       }
   }
}

SYNTAX  : ethernet cfm error-log [enable | disable] [size <entries(1-4096)>]
PRVID   : 15
HELP    : Enables the logging of errors occurred on the device in the Error Log table and also sets the maximum size of the table.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          error-log Error log related configuration|
          enable Enables logging of errors in error log table|
          disable Disables logging of errors in error log table|
          size Size of the error log table|
          (1-4096)  Number of entries that can be stored in loopback cache|
          <CR> Enables the logging of errors occurred on the device in the Error Log table and also sets the maximum size of the table.

COMMAND : ethernet cfm mep-capability [{enable | disable}] {domain <string(43)> | level <string>} 
[{service <string(43)> | vsi <string> | vlan <string> | service-instance <integer(256-16777214)>}] 
([ping] [multicast-ping] [test] [multicast-test] [one-way-frame-delay] [turnaround-delay]
[ais] [rdi][loss-measurement][csf]) 
ACTION  :
{
    UINT4 u4Flag = 0;

    if ($4 != NULL)
    {
        u4Flag |= CLI_ECFM_DISABLE_CAP;
    }
    if ($17 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_PING_CAP;
    }
    if ($18 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_MCAST_PING_RX_CAP;
    }
    if ($21 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_1WAY_FD_RX_CAP;
    }
    if ($19 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_TST_RX_CAP;
    }
    if ($20 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_MCAST_TST_RX_CAP;
    }
    if ($22 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_TX_OPT_FIELDS_DMR_CAP;
    }
    if ($23 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_AIS_CAP;
    }
    if ($24 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_RDI_CAP;
    }
    if ($25 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_LM_CAP;
    }
    if ($26 != NULL)
    {
        u4Flag |= CLI_ECFM_SET_CSF_CAP;
    }


    if ($5 != NULL)
    {
        if ($9 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_MEP_CAPABILITY_IN_DOM_SER_MA, NULL, u4Flag,
                    $6, $10);
        }
        else if ($11 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle,
                    CLI_ECFM_SET_MEP_CAPABILITY_IN_DOM_VSI_MA, NULL, u4Flag,
                    $6, $12);
        }
        else if ($13 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle,
                    CLI_ECFM_SET_MEP_CAPABILITY_IN_DOM_VLAN_MA, NULL, u4Flag,
                    $6, $14);
        }
        else if ($15 != NULL)
        {
#ifdef PBB_WANTED
            cli_process_ecfm_config_cmd (CliHandle,
                                         CLI_ECFM_SET_MEP_CAPABILITY_IN_DOM_ISID_MA, NULL, u4Flag,
                                         $6, $16);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle,
                    CLI_ECFM_SET_DOM_UNAWARE_MEP_CAPABILITY_IN_MA, NULL, u4Flag, $6);
        } 
    }
    else
    {
        if ($9 != NULL)
        {
             CliPrintf (CliHandle, "\r%% Invalid List of Arguments\r\n");    
        }
        else if ($11 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle,
                    CLI_ECFM_SET_MEP_CAPABILITY_IN_LEV_VSI_MA, NULL, u4Flag,
                    $8, $12);
        }
        else if ($13 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle,
                    CLI_ECFM_SET_MEP_CAPABILITY_IN_LEV_VLAN_MA, NULL, u4Flag,
                    $8, $14);
        }
        else if ($15 != NULL)
        {
#ifdef PBB_WANTED
            cli_process_ecfm_config_cmd (CliHandle,
                                         CLI_ECFM_SET_MEP_CAPABILITY_IN_LEV_ISID_MA, NULL, u4Flag,
                                         $8, $16);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle,
                    CLI_ECFM_SET_LEV_UNAWARE_MEP_CAPABILITY_IN_MA, NULL, u4Flag, $6);
        } 
    }
}

SYNTAX  : ethernet cfm mep-capability [enable | disable] {domain <domain-name> | level <a,b,c-d>} 
[service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance <integer(256-16777214)>]
([ping] [multicast-ping] [test] [multicast-test] [one-way-frame-delay] [turnaround-delay] [ais] [rdi] [loss-measurement][csf])
PRVID   : 15
HELP    : Enables or disables the capabilities of all the MEPs at the provided level and vlan. Level range is from 0 to 7 and Vlan range is from 1 to 4094.          
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mep-capability Maintenance end point related configuration|
          enable Enables mep capabilities|
          disable Disables mep capabilities| 
          domain domain related configuration|
          <string(43) Domain name|
          level Indicates maintenance level for configuration|
          <string> List of maintenance value|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) if for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI|
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          ping Configures ping operation|
          multicast-ping Sends multicast CCM|
          test Enables the MEP capability to initiate and process TST operation|
          multicast-test Enables the MEP capability to process multicast LBM|
          one-way-frame-delay Enables the MEP capability to process one dm frames|
          turnaround-delay Indicates whether to include optional fields in the DMR Frame or not|
          ais Configures transmission of AIS frames|
          rdi Configures transmission of RDI bit|
          loss-measurement Enables the MEP capability to initiate and process LMPDUs|
          csf Configures transmission of CSF frames|
          <CR>  Enables or disables the capabilities of all the MEPs at the provided level and vlan. Level range is from 0 to 7 and Vlan range is from 1 to 4094.

COMMAND : ethernet cfm vlan-param ([{domain <string(43)> | level <integer(0-7)>}]
[drop-eligibility {enable | disable}][vlan-priority <integer(0-7)>])

ACTION  :
{
  UINT1 u1Sts = 0; 

  if ($7 != NULL)
  {
      if ($8 != NULL)
      {
          u1Sts = ECFM_ENABLE;
      }
      else
      {
          u1Sts = ECFM_DISABLE;
      }
  }

   if ($3 != NULL)
   {
       if ($10 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_PRIORITY_DOM, NULL,
                                        u1Sts, $4, $11);

       }
       else
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_DOM, NULL, u1Sts, $4);
       }
   }
   else if ($5 != NULL)
   {
           if ($10 != NULL)
           {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_PRIORITY_LEV, NULL,
                                        u1Sts, $6, $11);
 
           }
           else
           {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_LEVEL, NULL,
                                        u1Sts, $6);
           }
   }
   else
   {
       if ($10 != NULL)
       {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_PRIORITY, NULL,
                                        u1Sts, $11);
       }
       else
       {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM, NULL,
                                        u1Sts);
       }
   }
}
SYNTAX  : ethernet cfm vlan-param ([{domain <domain_name> | level <level-id(0-7)>}]
[drop-eligibility {enable | disable}] [vlan-priority <vlan-priority(0-7)>])
PRVID   : 15
HELP    : Sets the drop eligibility and vlan priority for the CFM PDU(s) to be transmitted by the MEPs in the specified domain.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          vlan-param VLAN related parameters|
          domain Domain related configuration|
          <string> Domain name|
          level Indicates maintenance level for configuration|
          (0-7)List of maintenance value|
          drop-eligibility PDU drop eligibility related information| 
          enable Enables drop eligibility|
          disable Disables drop eligibility|
          vlan-priority VLAN priority related configuration|
          (0-7) Priority value|
          <CR> Sets the drop eligibility and vlan priority for the CFM PDU(s) to be transmitted by the MEPs in the specified domain.

COMMAND : ethernet cfm service-instance-param ([{domain <string(43)> | level <integer(0-7)>}]
[drop-eligibility {enable | disable}][service-instance-priority <integer(0-7)>])
ACTION  :
{
  UINT1 u1Sts = 0; 
  if ($7 != NULL)
  {
      if ($8 != NULL)
      {
          u1Sts = ECFM_ENABLE;
      }
      else
      {
          u1Sts = ECFM_DISABLE;
      }
  }
   if ($3 != NULL)
   {
       if ($10 != NULL)
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_PRIORITY_DOM, NULL,
                                        u1Sts, $4, $11);
       }
       else
       {
           cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_DOM, NULL, u1Sts, $4);
       }
   }
   else if ($5 != NULL)
   {
           if ($10 != NULL)
           {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_PRIORITY_LEV, NULL,
                                        u1Sts, $6, $11);
 
           }
           else
           {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_LEVEL, NULL,
                                        u1Sts, $6);
           }
   }
   else
   {
       if ($10 != NULL)
       {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM_PRIORITY, NULL,
                                        u1Sts, $11);
       }
       else
       {
               cli_process_ecfm_config_cmd (CliHandle,
                                        CLI_ECFM_VLAN_PARAM, NULL,
                                        u1Sts);
       }
   }
}
SYNTAX  : ethernet cfm service-instance-param ([{domain <domain_name> | level <level-id(0-7)>}]
[drop-eligibility {enable | disable}] [service-instance-priority
<service-instance-priority(0-7)>])
PRVID   : 15
HELP    : Sets the drop eligibility and service instance priority for the CFM PDU(s) to be transmitted by the MEPs in the specified domain.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          service-instance-param Service instance parameter related configuration|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7)List of maintenance value|
          drop-eligibility PDU drop eligibility related information|
          enable  Disables service instance priority|
          disable Enables service instance priority|
          service-instance-priority Service instance priority related configuration|
          (0-7) Service instance priority value|
          <CR> Sets the drop eligibility and service instance priority for the CFM PDU(s) to be transmitted by the MEPs in the specified domain.

END GROUP
/***********  Y.1731 : Conf Commands End ***********/ 

/*****************************************************************************/
/*                  ECFM DOMAIN CONFIGURATION COMMANDS                       */
/*****************************************************************************/

DEFINE GROUP: ECFM_DOM_CFG_CMDS

COMMAND : set mip-creation-criteria {none | default | explicit} 
ACTION  :
{
   INT4 i4MdMhfCriteria = 0;
   if ($2 != NULL) 
   {
       i4MdMhfCriteria = ECFM_MHF_CRITERIA_NONE;
   }
   else if ($3 != NULL)
   {
       i4MdMhfCriteria = ECFM_MHF_CRITERIA_DEFAULT;
   }
   else
   {
       i4MdMhfCriteria = ECFM_MHF_CRITERIA_EXPLICIT;
   }
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOMAIN_SET_MHF_CRITERIA, NULL, 
                                i4MdMhfCriteria);
}
  
SYNTAX  : set mip-creation-criteria {none | default | explicit} 
PRVID   : 15
HELP    : Sets MIP creation criteria for the MIPs to be associated with the Maintenance Domain.
CXT_HELP: set Configures the parameters|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          none No MHFs can be created for this VID|
          default Creates  MHFs on this VID on any bridge port through which the VID can pass|
          explicit Creates MHFs for this VID only on bridge ports through which the VID can pass|
         <CR> Sets MIP creation criteria for the MIPs to be associated with the Maintenance Domain.

COMMAND : set sender-id-permission {none | chassis | manage | chassis-mgt-address} 
ACTION  :
{
   INT4 i4SenderIdPermission = 0;
   if ($2 != NULL) 
   {
       i4SenderIdPermission = ECFM_SENDER_ID_NONE;
   }
   else if ($3 != NULL)
   {
       i4SenderIdPermission = ECFM_SENDER_ID_CHASSIS;
   }
   else if ($4 != NULL)
   {
       i4SenderIdPermission = ECFM_SENDER_ID_MANAGE;
   }
   else
   {
       i4SenderIdPermission = ECFM_SENDER_ID_CHASSID_MANAGE;
   }
   cli_process_ecfm_config_cmd (CliHandle, 
                                CLI_ECFM_DOMAIN_SET_SENDER_ID_PERMISSION, 
                                NULL, i4SenderIdPermission);
}
  
SYNTAX  : set sender-id-permission {none | chassis | manage | chassis-mgt-address} 
PRVID   : 15
HELP    : Sets sender ID permission for the MIPs to be associated with the Maintenance Domain.
CXT_HELP: set Configures the parameters|
          sender-id-permission Configures information related to sender-id TLV transmission|
          none No MHFs can be created for this VID|
          chassis Sends chassis ID Length,ID,subtype and chassis ID fields of sender ID TLV|
          manage Sends management Address Length and Management Address of sender ID TLV|
          chassis-mgt-address Sends chassis ID Length,ID,subtype,Management Address Length and Management Address|
          <CR> Sets sender ID permission for the MIPs to be associated with the Maintenance Domain.

/************* Y.1731 : Command modified for ICC and UMC ***************/
COMMAND : service [format {primary-vid | char-string | unsigned-int16 | rfc2865-vpn-id | icc}] name <string(43)>
[{icc <string(6)> umc <string(12)>}] [{ vsi <vsi_id> [oam-vlan <integer(0-4094)>]| vlan <vlan_vfi_id> | service-instance <integer(256-16777214)>}]
[mip-creation-criteria {none | default | explicit | defer}] [sender-id-permission {none | chassis | manage | chassis-mgt-address | defer}] 
ACTION  :
{
   INT4 i4MaMhfCriteria = 0;
   INT4 i4SenderIdPermission = 0;
   UINT4 u4MaNameType = 0;

   if ($2 != NULL)
   {
       u4MaNameType = CLI_ECFM_MA_NAME_TYPE_PRIMARY_VID;
   }
   else if ($4 != NULL)
   {
       u4MaNameType = CLI_ECFM_MA_NAME_TYPE_UNSIGNED_INT16;
   }
   else if ($5 != NULL)
   {
       u4MaNameType = CLI_ECFM_MA_NAME_TYPE_RFC2865_VPN_ID;
   }
   else if ($6 != NULL)
   {
       u4MaNameType = CLI_ECFM_MA_NAME_TYPE_ICC;
       if (($9 == NULL) || ($11 == NULL))
       {
           CliPrintf (CliHandle, "%% Please enter the ICC and UMC Name \r\n");
           return CLI_FAILURE;
       }
   }
   else
   {
       u4MaNameType = CLI_ECFM_MA_NAME_TYPE_CHAR_STRING;
   }

   if ($7 == NULL)
   {
       if ((u4MaNameType == CLI_ECFM_MA_NAME_TYPE_UNSIGNED_INT16) || 
           (u4MaNameType == CLI_ECFM_MA_NAME_TYPE_RFC2865_VPN_ID) || 
           (u4MaNameType == CLI_ECFM_MA_NAME_TYPE_CHAR_STRING))
       {
           CliPrintf (CliHandle, "%% Please enter the service name \r\n");
           return CLI_FAILURE;
       }
   }

   if ($22 != NULL) 
   {
       i4MaMhfCriteria = ECFM_MHF_CRITERIA_NONE;
   }
   else if ($23 != NULL)
   {
       i4MaMhfCriteria = ECFM_MHF_CRITERIA_DEFAULT;
   }
   else if ($24 != NULL)
   {
       i4MaMhfCriteria = ECFM_MHF_CRITERIA_EXPLICIT;
   }
   else if ($25 != NULL)
   {
       i4MaMhfCriteria = ECFM_MHF_CRITERIA_DEFER;
   }
   else
   {
       i4MaMhfCriteria = -1;
   }

   if ($27 != NULL) 
   {
       i4SenderIdPermission = ECFM_SENDER_ID_NONE;
   }
   else if ($28 != NULL)
   {
       i4SenderIdPermission = ECFM_SENDER_ID_CHASSIS;
   }
   else if ($29 != NULL)
   {
       i4SenderIdPermission = ECFM_SENDER_ID_MANAGE;
   }
   else if ($30 != NULL)
   {
       i4SenderIdPermission = ECFM_SENDER_ID_CHASSID_MANAGE;
   }
   else if ($31 != NULL)
   {
       i4SenderIdPermission = ECFM_SENDER_ID_DEFER;
   }
   else
   {
       i4SenderIdPermission = -1;
   }

    /* With VSI */
    if($13 != NULL)
    {
        if ($9 != NULL)
        {
            if ($15 != NULL)
            {
            cli_process_ecfm_config_cmd (CliHandle, 
                                             CLI_ECFM_ASSOC_CREATE_VSIID_OAM_VLAN_ICC_UMC, NULL,
                                             $8, $14, i4MaMhfCriteria,
                                             i4SenderIdPermission, $10,
                                             $12, u4MaNameType, $16);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle,
                                             CLI_ECFM_ASSOC_CREATE_VSIID_ICC_UMC, NULL,
                                         $8, $14, i4MaMhfCriteria,
                                         i4SenderIdPermission, $10,
                                         $12, u4MaNameType);
        }
        }
        else
        {
            if ($15 != NULL)
            {
            cli_process_ecfm_config_cmd (CliHandle, 
                                             CLI_ECFM_ASSOC_CREATE_VSIID_OAM_VLAN, NULL,
                                         $8, $14, i4MaMhfCriteria,
                                             i4SenderIdPermission, u4MaNameType, $16);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle,
                                             CLI_ECFM_ASSOC_CREATE_VSIID, NULL,
                                             $8, $14, i4MaMhfCriteria,
                                             i4SenderIdPermission, u4MaNameType);
            }
        }
    }
    else if($17 != NULL)
    {
    /* With Vlan */
        if ($9 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, 
                                         CLI_ECFM_ASSOC_CREATE_ICC_UMC, NULL, 
                                         $8, $18, i4MaMhfCriteria,
                                         i4SenderIdPermission, $10,
                                         $12, u4MaNameType);
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, 
                                         CLI_ECFM_ASSOC_CREATE, NULL, 
                                         $8, $18, i4MaMhfCriteria,
                                         i4SenderIdPermission, u4MaNameType);
        }
    }
    /* With SID */
    else if ($19 != NULL) 
    {
#ifdef PBB_WANTED
        if ($9 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, 
                                         CLI_ECFM_ASSOC_CREATE_ISID_ICC_UMC, NULL, 
                                         $8, $20, i4MaMhfCriteria,
                                         i4SenderIdPermission, $10,
                                         $12, u4MaNameType);
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, 
                                         CLI_ECFM_ASSOC_CREATE_ISID, NULL, 
                                         $8, $20, i4MaMhfCriteria,
                                         i4SenderIdPermission, u4MaNameType);
        }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
    }
    else
    {
        if ($9 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, 
                                         CLI_ECFM_UNAWARE_ASSOC_CREATE_ICC_UMC, NULL, 
                                         $8, i4MaMhfCriteria,
                                         i4SenderIdPermission, $10,
                                         $12, u4MaNameType);
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, 
                                         CLI_ECFM_UNAWARE_ASSOC_CREATE, NULL, 
                                         $8, i4MaMhfCriteria,
                                         i4SenderIdPermission, u4MaNameType);
        }
    }    
}

SYNTAX  : service [format {primary-vid | char-string | unsigned-int16 |
rfc2865-vpn-id | icc}] name <service_name> [icc <icc_code> umc <umc_code>] [{ vsi <vsi_id> [oam-vlan <integer(0-4094)>] | vlan <vlan-id/vfi-id> | service-instance <service-instance(256-16777214)>] [mip-creation-criteria {none | default | explicit | defer}] [sender-id-permission {none | chassis | manage | chassis-mgt-address | defer}]
PRVID   : 15
HELP    : Configures the provided Service (Maintenance Association) at the specified vlan. 
CXT_HELP: service Configures service related details|
          format Service type related configuration|
          primary-vid Primary vlan ID|
          char-string  Sets the Service format as RFC2579 Display string|
          unsigned-int16 2-octet integer/big endian|
          rfc2865-vpn-id 3 octet VPN authority unique identifier| 
          icc Sets the Service format as ICC| 
          name Service name related configuration|
          <string(43)> Service name list| 
          icc ITU-Carrier code related configuration|
          <string(6)> ICC code list|
          umc Unique maintenance entity group identifier code related configuration|
          <string(12)> UMC code list|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID | 
          oam-vlan OAM Vlan related configuration |
          <integer(0-4094)> The range (0-4094) is for VLAN ID used in Vlan Range VEP |
          vlan VLAN related configuration| 
          vlan_vfi_id The range (1-4094) is for VLAN ID |
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          mip-creation-criteria Value used to create MHF associated with MA in Maintenance Domain|
          none No MHFs can be created for this VID|
          default Creates  MHFs on this VID on any bridge port through which the VID can pass|
          explicit Creates MHFs for this VID only on bridge ports through which the VID can pass|
          defer Creation of MHFs is determined by corresponding Maintenance Domain variable|
          sender-id-permission Configures information related to sender-id TLV transmission|
          none Sender ID TLV is not to be sent|
          chassis Sends chassis ID Length,ID,subtype and chassis ID fields of sender ID TLV|
          manage Sends management address length and management address of sender ID TLV|
          chassis-mgt-address Sends chassis ID Length,ID,subtype,Management Address Length and Management Addresformat|
          defer Sender ID TLV are determined by corresponding Maintenance Domain variable|
          <CR> Configures the provided Service (Maintenance Association) at the specified vlan.

COMMAND : no service [format {primary-vid | char-string | unsigned-int16 |
rfc2865-vpn-id | icc}] name <string(43)> 
ACTION  :
{
        INT4 i4MaNameType = 0;

        if ($3 != NULL)
        {
            i4MaNameType = CLI_ECFM_MA_NAME_TYPE_PRIMARY_VID;
        }
        else if ($5 != NULL)
        {
            i4MaNameType = CLI_ECFM_MA_NAME_TYPE_UNSIGNED_INT16;
        }
        else if ($6 != NULL)
        {
            i4MaNameType = CLI_ECFM_MA_NAME_TYPE_RFC2865_VPN_ID;
        }
        else if ($7 != NULL)
        {
            i4MaNameType = CLI_ECFM_MA_NAME_TYPE_ICC;
        }
        else
        {
            i4MaNameType = CLI_ECFM_MA_NAME_TYPE_CHAR_STRING;
        }

        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ASSOC_DELETE,
                                     NULL, $9, i4MaNameType);
}
SYNTAX  : no service [format {primary-vid | char-string | unsigned-int16 | 
          rfc2865-vpn-id | icc}] name <service_name>
PRVID   : 15
HELP    : Deletes the provided Service (Maintenance Association).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          service Service related configuration|
          name Service name related configuration|
          <string(43)> Service name list|
          <CR>  Deletes the provided Service (Maintenance Association).

COMMAND : mep crosscheck mpid <integer(1-8191)> [{service <string(43)> | vsi <vsi_id> | vlan <vlan_vfi_id> | service-instance <integer(256-16777214)>}]
ACTION  :
{
    if ($4 != NULL)
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_SER_RMEP, NULL, $3, $5); 
    }
    else if ($6 != NULL)
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_VSI_RMEP, NULL, $3, $7);
    }
    else if ($8 != NULL)
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_VLAN_RMEP, NULL, $3, $9);
    }
    else if ($10 != NULL)
    {
#ifdef PBB_WANTED
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_ISID_RMEP, NULL, $3, $11);
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
    }
    else
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_UNAWARE_RMEP, NULL, $3); 
    }
}

SYNTAX  : mep crosscheck mpid <id(1-8191)> [{service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance <integer(256-16777214)>}]
PRVID   : 15
HELP    : Statically defines maintenance end point(MEP).(MEP is defined in a list of MEPIDs of a service associated with a provided VLAN or Isid) 
CXT_HELP: mep Configures maintenance end point related configuration|
          crosscheck Crosschecks the number of missed CCM|
          mpid Maintenance end point ID related configuration|
          (1-8191) Maintenance end point ID|
          service Service related configuration|
          <string(43)> Service list|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          <CR> Statically defines maintenance end point(MEP). MEP is defined in a list of MEPIDs of a service associated with a provided VLAN or Isid).

COMMAND : no mep crosscheck mpid <integer(1-8191)> [{service <string(43)> | vsi <vsi_id> |vlan <vlan_vfi_id> | service-instance <integer(256-16777214)>}]
ACTION  :
{
    if ($5 != NULL)
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_SER_RMEP, NULL, $4, $6); 
    }
    else if ($7 != NULL)
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_VSI_RMEP, NULL, $4, $8);
    }
    else if ($9 != NULL)
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_VLAN_RMEP, NULL, $4, $10);
    }
    else if ($11 != NULL)
    {
#ifdef PBB_WANTED
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_ISID_RMEP, NULL, $4, $12);
#else
        CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
        return CLI_FAILURE;
#endif
    }
    else
    {
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_UNAWARE_RMEP, NULL, $4); 
    }
}

SYNTAX  : no mep crosscheck mpid <id(1-8191)> [{service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance <integer(256-16777214)>}]
PRVID   : 15
HELP    : Deletes statically defined maintenance end point (MEP) from a list of MEPIDs of a service associated with a provided VLAN or Isid.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          mep Configures maintenance end point related configuration|
          crosscheck Crosschecks the number of missed CCM|
          mpid Maintenance end point ID related configuration|
          (1-8191) Maintenance end point ID|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          <CR> Deletes statically defined maintenance end point (MEP) from a list of  MEPIDs of a service associated with a provided VLAN or Isid.


COMMAND : mep archive-hold-time <integer(100-65535)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CC_SET_ARCHIVE_HOLDTIME, NULL, $2); 
}

SYNTAX  : mep archive-hold-time <minutes(100-65535)>
PRVID   : 15
HELP    : Sets the amount of time such that information from a MEP is kept in the CC database before they are purged.
CXT_HELP: mep Configures maintenance end point related configuration|
          archive-hold-time Amount of time that data from missing mep is kept in continuity check database|
         (100-65535) Hold time|
          <CR> Sets the amount of time such that information from a MEP is kept in the CC database before they are purged.

COMMAND : no mep archive-hold-time 
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CC_RESET_ARCHIVE_HOLDTIME, NULL); 
}

SYNTAX  : no mep archive-hold-time 
PRVID   : 15
HELP    : Sets the configured archive hold time to default value (i.e. 100 minutes).
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          mep Configures maintenance end point related configuration|
          archive-hold-time Amount of time that data from missing mep is kept in continuity check database|
          <CR> Sets the configured archive hold time to default value (i.e. 100 minutes).

COMMAND : client-layer-level <integer(0-7)>
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_CLNT_LAYER_LEVEL,
                                NULL, $1);
}
SYNTAX  : client-layer-level <level-id(0-7)>
PRVID   : 15
HELP    : Configures the Client Layer MEPs MD Level required for multicast CSF, AIS and LCK messages.
CXT_HELP: client-layer-level Configures client layer mep related information|
          (0-7) Client layer level ID|
          <CR> Configures the Client Layer MEPs MD Level required for multicast CSF, AIS and LCK messages.

COMMAND : no client-layer-level
ACTION  :
{
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RESET_CLNT_LAYER_LEVEL, NULL);
}
SYNTAX  : no client-layer-level
PRVID   : 15
HELP    : Resets the configured client layer MEPs MD Level required for multicast CSF, AIS and LCK messages.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          client-layer-level Configures client layer mep related information|
          <CR> Resets the configured client layer MEPs MD Level required for multicast CSF, AIS and LCK messages.


COMMAND  : exit
ACTION   :
	{
		CLI_SET_IFINDEX (-1);
		CliChangePath ("..");
	}
SYNTAX  : exit
PRVID   : 15
HELP    : exit to configure mode.
CXT_HELP: exit Exit to the global configuration mode|
          <CR> Exits to configure mode.

END GROUP

/*****************************************************************************/
/*                        ECFM VLAN COMMANDS                                 */
/*****************************************************************************/

DEFINE GROUP: ECFM_VLAN_CMDS
COMMAND : ethernet cfm associate vlan-id <string> primary-vlan-id <vlan_vfi_id>
ACTION  :
{
    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ASSOC_VLANS_TO_PVLAN, NULL,
    $6, $4);
}

SYNTAX  : ethernet cfm associate vlan-id <a,b,c-d> primary-vlan-id <vlan-id/vfi-id> 
PRVID   : 15
HELP    : Associates maximum 32 Vlan-Id(s) to a Primary Vlan. Vlan-id range is 1 to 4094. 
CXT_HELP : ethernet Configures Ethernet|
          cfm CFM related configuration|
          associate Associates Vlan-Id or list of vlan ID to a Primary Vlan|
          vlan-id VLAN id related configuration|
          vlan-id (1-4094)|
          primary-vlan-id Primary vlan id related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          <CR> Associates maximum 32 Vlan-Id(s) to a Primary Vlan. Vlan-id range is 1 to 4094.

COMMAND : no ethernet cfm associate vlan-id <string> primary-vlan-id <vlan_vfi_id>
ACTION  :
{
    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DIS_ASSOC_VLANS_TO_PVLAN,
    NULL, $7, $5);
}

SYNTAX  : no ethernet cfm associate vlan-id <1-4094> primary-vlan-id <vlan-id/vfi-id>
PRVID   : 15
HELP    : Dis-Associate  Vlan-Id(s) to a Primary Vlan. Vlan-id range is 1 to 4094.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          associate Associates Vlan-Id or list of vlan ID to a Primary Vlan|
          vlan-id VLAN id related configuration|
          vlan-id (1-4094)|
          primary-vlan-id Primary vlan id related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          <CR> Dis-Associate  Vlan-Id(s) to a Primary Vlan. Vlan-id range is 1 to 4094.

END GROUP


/*****************************************************************************/
/*                        ECFM PBB COMMANDS                                 */
/*****************************************************************************/

DEFINE GROUP: ECFM_PBB_CMDS
COMMAND : ethernet cfm mep {domain <string(43)> | level <integer (0-7)>} [inward] mpid <integer (1-8191)>  [active]
ACTION  :
{
    if ($3 != NULL)
    {
        if ($7 == NULL)
        {
            if($10 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_ACTIVE_PBB_MEP_CTRL_CONF_DOM, NULL,
                        $4, $9);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_PBB_MEP_CTRL_CONF_DOM, NULL,
                        $4, $9);
            }
        }
        else
        {
            if($10 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_ACTIVE_PBB_MEP_CTRL_CONF_DOM, NULL,
                        $4, $9);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_PBB_MEP_CTRL_CONF_DOM, NULL,
                        $4, $9);
            }
        }
    }
    else
    {
        if ($7 == NULL)
        {
            if($10 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_ACTIVE_PBB_MEP_CTRL_CONF_LEV, NULL,
                        $6, $9);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_PBB_MEP_CTRL_CONF_LEV, NULL,
                        $6, $9);
            }
        }
        else
        {
            if($10 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_ACTIVE_PBB_MEP_CTRL_CONF_LEV, NULL,
                        $6, $9);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_PBB_MEP_CTRL_CONF_LEV, NULL,
                        $6, $9);
            }
        }
    }
}

SYNTAX  : ethernet cfm mep {domain <domain-name> | level <level-id (0-7)>} [inward] mpid <mpid (1-8191)>  [active]
PRVID   : 15
HELP    : This command configures the MEP for an service-instance . 
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mep Maintenance end point related configuration|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          inward MEP faces in up direction on the bridge port|
          mpid  MEP ID related configuration|
          (1-8191) MEP identifier|
          active Operational status of mep| 
          <CR> This command configures the MEP for an service-instance.

COMMAND : no ethernet cfm mep {domain <string(43)> | level <integer (0-7)>} [inward] mpid <integer (1-8191)>  [active]
ACTION  :
{
    if ($3 != NULL)
    {
        if($8 != NULL)
        {
            if($11 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_ACTIVE_PBB_MEP_CTRL_NOCONF_DOM, NULL,
                        $5, $10);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_PBB_MEP_CTRL_NOCONF_DOM, NULL,
                        $5, $10);
            }
        }
        else
        {
            if($11 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_ACTIVE_PBB_MEP_CTRL_NOCONF_DOM, NULL,
                        $5, $10);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_PBB_MEP_CTRL_NOCONF_DOM, NULL,
                        $5, $10);
            }
        }
    }
    else
    {
        if($8 != NULL)
        {
            if($11 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_ACTIVE_PBB_MEP_CTRL_NOCONF_LEV, NULL,
                        $5, $10);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_PBB_MEP_CTRL_NOCONF_LEV, NULL,
                        $5, $10);
            }
        }
        else
        {
            if($11 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_ACTIVE_PBB_MEP_CTRL_NOCONF_LEV, NULL,
                        $5, $10);
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_PBB_MEP_CTRL_NOCONF_LEV, NULL,
                        $5, $10);
            }
        }
    }
}

SYNTAX  : no ethernet cfm mep {domain <domain-name> | level <level-id (0-7)>} [inward] mpid <mpid (1-8191)>  [active]
PRVID   : 15
HELP    : This command removes the configured MEP.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mep Maintenance end point related configuration|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          inward MEP faces in up direction on the bridge port|
          mpid  MEP ID related configuration|
          (1-8191) MEP identifiers|
          active Operational status of mep|
          <CR> This command removes the configured MEP.

COMMAND : ethernet cfm mip {domain <string(43)> | level <integer (0-7)>} [active]
ACTION  :
{
    if($3 != NULL)
    {
        if($7 != NULL)
    {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_PBB_MIP_CTRL_CONF_DOM, NULL,
                $4);
    }
    else
    {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_PBB_MIP_CTRL_CONF_DOM, NULL,
                $4);
    }
 }
    else
    {
        if($7 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_PBB_MIP_CTRL_CONF_LEV, NULL,
                    $6);
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_PBB_MIP_CTRL_CONF_LEV, NULL,
                    $6);
        }
    }
}

SYNTAX  : ethernet cfm mip {domain <domain-name> | level <level-id (0-7)>} [active]
PRVID   : 15
HELP    : This command configures the MIP for an service-instance . 
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip  Maintenance intermediate point related configuration|
          domain Domain related configuration| 
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          active Operational status of mip| 
          <CR> This command configures the MIP for an service-instance.

COMMAND : no ethernet cfm mip {domain <string(43)> | level <integer (0-7)>} [active]
ACTION  :
{
    if($3 != NULL)
    {
        if($8 != NULL)
    {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_PBB_MIP_CTRL_NOCONF_DOM, NULL,
                $5);
    }
    else
    {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_PBB_MIP_CTRL_NOCONF_DOM, NULL,
                $5);
    }
}
    else
    {
        if($8 != NULL)
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_PBB_MIP_CTRL_NOCONF_LEV, NULL,
                    $7);
        }
        else
        {
            cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_PBB_MIP_CTRL_NOCONF_LEV, NULL,
                    $7);
        }
    }

}

SYNTAX  : no ethernet cfm mip {domain <domain-name> | level <level-id (0-7)>} [active]
PRVID   : 15
HELP    : This command removes the configured MIP.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip  Maintenance intermediate point related configuration|
          domain Domain related configuration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          active Operational status of mip|
          <CR> This command removes the configured MIP.

END GROUP


/*****************************************************************************/
/*                         ECFM INTFCFG COMMANDS                             */
/*****************************************************************************/
DEFINE GROUP: ECFM_INTFCFG_CMDS

COMMAND : ethernet cfm enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_CFM_ON_INTF,
                         NULL);
}

SYNTAX  : ethernet cfm enable 
PRVID   : 15
HELP    : Enables ethernet connectivity fault management (CFM) processing on an interface.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          enable Enables cfm processing|
          <CR> Enables ethernet connectivity fault management (CFM) processing on an interface.

COMMAND : no ethernet cfm enable 
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_CFM_ON_INTF,
                         NULL);
}

SYNTAX  : no ethernet cfm enable 
PRVID   : 15
HELP    : Disables ethernet connectivity fault management (CFM) processing on an interface.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          enable Enables cfm processing|
          <CR> Disables ethernet connectivity fault management (CFM) processing on an interface.

         
COMMAND : ethernet cfm y1731 enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_Y1731_ON_INTF, NULL);
}

SYNTAX  : ethernet cfm y1731 enable  
PRVID   : 15
HELP    : Enables Y.1731 processing on an interface. For Y.1731 to be enabled, ECFM should be enabled.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          y1731 Y1731 related configuration|
          enable Enables Y1731 processing|
          <CR> Enables Y.1731 processing on an interface. For Y.1731 to be enabled, ECFM should be enabled.

COMMAND : no ethernet cfm y1731 enable
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_Y1731_ON_INTF, NULL);
}

SYNTAX  : no ethernet cfm y1731 enable  
PRVID   : 15
HELP    : Disables Y.1731 processing on an interface.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          y1731 Y1731 related configuration|
          enable Enables Y1731 processing|
          <CR>  Disables Y.1731 processing on an interface.
          
COMMAND : ethernet cfm mep {domain <string(43)> | level <integer(0-7)>} [inward] mpid <integer(1-8191)>
[{service <string(43)> | vsi <vsi_id> | vlan <vlan_vfi_id> | service-instance  <integer(256-16777214)>}] [active]
ACTION  :
{
    if ($3 != NULL) 
    {
        if ($7 != NULL) 
        {
            if ($10 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_SER_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $11);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_SER_MEP_CTRL_CONF,
                            NULL, $4, $9, $11);
                }
            }
            else if ($12 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VSI_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $13);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VSI_MEP_CTRL_CONF,
                            NULL, $4, $9, $13);
                }
            }
            else if ($14 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VLAN_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $15);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VLAN_MEP_CTRL_CONF,
                            NULL, $4, $9, $15);
                }
            }
            else if ($16 != NULL)
            {
#ifdef PBB_WANTED                
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_ISID_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $17);
                }
                else
   {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_ISID_MEP_CTRL_CONF,
                            NULL, $4, $9, $17);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
       {
                if ($18 != NULL)
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_UNAWARE_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9);
           }
           else
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_UNAWARE_MEP_CTRL_CONF,
                            NULL, $4, $9);
                }
           }
       }
       else
       {
           if ($10 != NULL)
           {

                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_SER_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $11);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_SER_MEP_CTRL_CONF,
                            NULL, $4, $9, $11);
                }
            }
            else if ($12 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VSI_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $13);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VSI_MEP_CTRL_CONF,
                            NULL, $4, $9, $13);
                }
            }
            else if ($14 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VLAN_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $15);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VLAN_MEP_CTRL_CONF,
                            NULL, $4, $9, $15);
                }
            }
            else if ($16 != NULL)
            {
#ifdef PBB_WANTED
                if ($18 != NULL)
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_ISID_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9, $17);
               }
               else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_ISID_MEP_CTRL_CONF,
                                                 NULL, $4, $9, $17);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
            {
                if ($18 != NULL)
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_UNAWARE_ACTIVE_MEP_CTRL_CONF, NULL, $4, $9);
               }
               else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_UNAWARE_MEP_CTRL_CONF,
                            NULL, $4, $9);
               }
           }
       }
   }
   else
   {
        if ($7 != NULL) 
        {
            if ($10 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_SER_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $11);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_SER_MEP_CTRL_CONF,
                            NULL, $6, $9, $11);
                }
            }
            else if ($12 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VSI_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $13);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VSI_MEP_CTRL_CONF,
                            NULL, $6, $9, $13);
                }
            }
            else if ($14 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VLAN_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $15);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VLAN_MEP_CTRL_CONF,
                            NULL, $6, $9, $15);
                }
            }
            else if ($16 != NULL)
            {
#ifdef PBB_WANTED
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_ISID_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $17);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_ISID_MEP_CTRL_CONF,
                            NULL, $6, $9, $17);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
       {
                if ($18 != NULL)
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_UNAWARE_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9);
           }
           else
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_UNAWARE_MEP_CTRL_CONF,
                            NULL, $6, $9);
                }
           }
       }
       else
       {
           if ($10 != NULL)
           {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_SER_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $11);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_SER_MEP_CTRL_CONF,
                            NULL, $6, $9, $11);
                }

           }
           else if ($12 != NULL)
           {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VSI_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $13);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VSI_MEP_CTRL_CONF,
                            NULL, $6, $9, $13);
                }
            }
            else if ($14 != NULL)
            {
                if ($18 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VLAN_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $15);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VLAN_MEP_CTRL_CONF,
                            NULL, $6, $9, $15);
                }
            }
            else if ($16 != NULL)
            {
#ifdef PBB_WANTED
                if ($18 != NULL)
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_ISID_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9, $17);
               }
               else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_ISID_MEP_CTRL_CONF,
                                                 NULL, $6, $9, $17);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
            {
                if ($18 != NULL)
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_UNAWARE_ACTIVE_MEP_CTRL_CONF, NULL, $6, $9);
               }
               else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_UNAWARE_MEP_CTRL_CONF,
                            NULL, $6, $9);
               }
           }
 
       }
   }
}

SYNTAX  : ethernet cfm mep {domain <domain-name> | level <0-7>} [inward] mpid <id(1-8191)> 
[{service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi_id> | service-instance  <integer(256-16777214)>}] [active]
PRVID   : 15
HELP    : Configures Maintenance end point (MEP)(Sets an interface as a domain boundary (edge)by defining it as a MEP), and set direction for the MEP. VLAN unaware MEP can be configured by not specifying the vlan keyword. Active keyword defines the operational status of MEP, by default MEP is operationally inactive. MEP direction, if not specified it would be outward (i.e. down MEP).    
CXT_HELP: ethernet Configures Ethernet| 
          cfm CFM related configuration|
          mep Maintenance endpoint related configuration|
          domain Domain related coniguration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7)List of maintenance value|
          inward MEP faces in up direction on the bridge port|
          mpid MEP ID related configuration|
          (1-8191) MEP identifiers|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          service-instance Service instance related configuration| 
          (256-16777214) Service instance value|
          active Operational status of mip|
          <CR> Configures Maintenance end point (MEP)(Sets an interface as a domain boundary (edge)by defining it as a MEP), and set direction for the MEP. VLAN unaware MEP can be configured by not specifying the vlan  keyword. Active keyword defines the operational status of MEP, by default MEP is operationally inactive. MEP direction, if not specified it would be outward (i.e. down MEP).
         
COMMAND : no ethernet cfm mep {domain <string(43)> | level <integer(0-7)>} [inward] mpid
<integer(1-8191)> [{service <string(43)> | vsi <vsi_id> | vlan <vlan_vfi_id> | service-instance  <integer(256-16777214)>}] [active]
ACTION  :
{
    if ($4 != NULL) 
    {
        if ($8 != NULL) 
        {
            if ($11 != NULL)
            {
                if ($17 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_SER_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $12);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_SER_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $12);
                }
            }
            else if ($13 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VSI_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $14);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VSI_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $14);
                }
            }
            else if ($15 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VLAN_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $16);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_VLAN_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $16);
                }
            }
            else if ($17 != NULL)
            {
#ifdef PBB_WANTED
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_ISID_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $18);
                }
                else
   {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_ISID_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $18);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
       {
                if ($19 != NULL)
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_UNAWARE_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10);
           }
           else
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_DOM_UNAWARE_MEP_CTRL_NOCONF,
                            NULL, $5, $10);
                }
           }
       }
       else
       {
           if ($11 != NULL)
           {

                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_SER_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $12);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_SER_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $12);
                }
            }
            else if ($13 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VSI_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $14);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VSI_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $14);
                }
            }
            else if ($15 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VLAN_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $16);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_VLAN_MEP_CTRL_NOCONF,
                            NULL, $5, $10, $16);
                }
            }
            else if ($17 != NULL)
            {
#ifdef PBB_WANTED
                if ($19 != NULL)
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_ISID_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10, $18);
               }
               else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_ISID_MEP_CTRL_NOCONF,
                                                 NULL, $5, $10, $18);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_UNAWARE_ACTIVE_MEP_CTRL_NOCONF, NULL, $5, $10);
                }
                else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_DOM_UNAWARE_MEP_CTRL_NOCONF,
                            NULL, $5, $10);
                }
            } 
        }
               }
               else
               {
        if ($8 != NULL) 
        {
            if ($11 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_SER_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $12);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_SER_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $12);
                }
            }
            else if ($13 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VSI_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $14);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VSI_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $14);
                }
            }
            else if ($15 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VLAN_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $16);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_VLAN_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $16);
                }
            }
            else if ($17 != NULL)
            {
#ifdef PBB_WANTED
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_ISID_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $18);
   }
   else
   {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_ISID_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $18);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
       {
                if ($19 != NULL)
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_UNAWARE_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10);
           }
           else
           {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_UP_LEV_UNAWARE_MEP_CTRL_NOCONF,
                            NULL, $7, $10);
                }
           }
       }
       else
       {
           if ($11 != NULL)
           {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_SER_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $12);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_SER_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $12);
                }

           }
           else if ($13 != NULL)
           {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VSI_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $14);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VSI_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $14);
                }
            }
            else if ($15 != NULL)
            {
                if ($19 != NULL)
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VLAN_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $16);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_VLAN_MEP_CTRL_NOCONF,
                            NULL, $7, $10, $16);
                }
            }
            else if ($17 != NULL)
            {
#ifdef PBB_WANTED
                if ($19 != NULL)
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_ISID_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10, $18);
               }
               else
               {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_ISID_MEP_CTRL_NOCONF,
                                                 NULL, $7, $10, $18);
                }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
            }
            else
            {
                if ($19 != NULL)
           	{
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_UNAWARE_ACTIVE_MEP_CTRL_NOCONF, NULL, $7, $10);
                }
                else
                {
                    cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DOWN_LEV_UNAWARE_MEP_CTRL_NOCONF,
                            NULL, $7, $10);
                }
           }
       }
   }
}
SYNTAX  : no ethernet cfm mep {domain <domain-name> | level <level-id(0-7)>} [inward] mpid <id(1-8191)>
[service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance  <service-instance (256-16777214)>] [active]
PRVID   : 15
HELP    : Deletes the configured maintenance end point (MEP) from the interface. Acive keyword makes MEP operationally de-active.Inward keyword, if not specified it would be outward (i.e. down MEP),vlan must be specified for vlan-aware MEP.    
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mep Maintenance endpoint related configuration|
          domain Domain related coniguration|
          <string(43)> Domain name|
          level Indicates maintenance level for configuration|
          (0-7)List of maintenance value|
          inward MEP faces in up direction on the bridge port|
          mpid MEP ID related configuration|
          (1-8191) MEP identifier|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          service-instance Service instance related configuration|
          (256-16777214) Service instance value|
          active Operational status of mip|
          <CR>  Deletes the configured maintenance end point (MEP) from the interface. Active keyword makes MEP operationally de-active. Inward keyword, if not specified it would be outward (i.e. down MEP),vlan must be specified for vlan-aware MEP.
 
COMMAND : ethernet cfm llc-encap {enable | disable}
ACTION  :
{
   if ($3 != NULL)
   {
           cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_LLC_ADD, NULL);
   }
   else
   {
           cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_NO_LLC, NULL);
   }
}

SYNTAX  : ethernet cfm llc-encap {enable | disable}
PRVID   : 15
HELP	: Enables or disables the LLC header addition in the transmitted CFM PDU.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          llc-encap Logical link control header addition related configuration|
          enable Enables llc header addition|
          disable Disables llc header addition|
          <CR> Enables or disables the LLC header addition in the transmitted CFM PDU.
          

COMMAND : ethernet cfm mip {domain <string(43)> | level <integer(0-7)>} {service <string(43)> |  vsi <vsi_id> | vlan <vlan_vfi_id> | service-instance  <integer(256-16777214)>} [active]
ACTION  :
{
    if ($3 != NULL)
    {
        if ($7 != NULL)
        {
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_DOM_SER, NULL, $4, $8); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_DOM_SER, NULL, $4, $8); 
            }
        }
        else if ($9 != NULL)
        {
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_DOM_VSI, NULL, $4, $10); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_DOM_VSI, NULL, $4, $10); 
            }
        }
        else if ($11 != NULL)
        {
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_DOM_VLAN, NULL, $4, $12); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_DOM_VLAN, NULL, $4, $12); 
            }
        }

        else if ($13 != NULL)
        {
#ifdef PBB_WANTED
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_DOM_ISID, NULL, $4, $14); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_DOM_ISID, NULL, $4, $14); 
            }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
    }
    else
    {
   if ($7 != NULL)
   {
            CliPrintf (CliHandle, "\r%% Invalid List of Arguments\r\n");
        }
        else if ($9 != NULL)
        {
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_LEV_VSI, NULL, $6, $10); 
   }
   else
   {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_LEV_VSI, NULL, $6, $10); 
            }
        }
        else if ($11 != NULL)
        {
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_LEV_VLAN, NULL, $6, $12); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_LEV_VLAN, NULL, $6, $12); 
            }
        }

        else if ($13 != NULL)
        {
#ifdef PBB_WANTED
            if ($15 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ACTIVE_MIP_LEV_ISID, NULL, $6, $14); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONFIG_MIP_LEV_ISID, NULL, $6, $14); 
            }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
   }
}

SYNTAX  : ethernet cfm mip {domain <domain-name> | level <level-id(0-7)>} {service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance  <integer(256-16777214)>} [active]
PRVID   : 15
HELP    : Configures Maintenance intermediate point (MIP) at the specified level and vlan on an interface. Active keyword makes MIP operationally active, by default MIP is configured as operationally active.
CXT_HELP: ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          domain Domain related configuration|
          <string(43)> Domain-name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          active Operational status of mip|
          <CR> Configures Maintenance intermediate point (MIP) at the specified level and vlan on an interface. Active keyword makes MIP operationally active, by default MIP is configured as operationally active.

COMMAND : no ethernet cfm mip {domain <string(43)> | level <integer(0-7)>} {service <string(43)> | vsi <vsi_id> | vlan <vlan_vfi_id> | service-instance  <integer(256-16777214)>} [active]
ACTION  :
{
    if ($4 != NULL)
    {
   if ($8 != NULL)
   {
            if ($16 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_DOM_SER,NULL, $5, $9); 
   }
   else
   {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_DOM_SER, NULL, $5, $9); 
            }
        }
        else if ($10 != NULL)
        {
            if ($16 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_DOM_VSI, NULL, $5, $11); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_DOM_VSI, NULL, $5, $11); 
   }
}
        else if ($12 != NULL)
        {
            if ($16 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_DOM_VLAN,NULL, $5, $13); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_DOM_VLAN, NULL, $5, $13); 
            }
        }
        else if ($14 != NULL)
        {
#ifdef PBB_WANTED
            if ($16 != NULL)
   {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_DOM_ISID, NULL, $5, $15); 
   }
   else
   {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_DOM_ISID, NULL, $5, $15); 
            }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
    }
    else
{
   if ($8 != NULL)
   {
             CliPrintf (CliHandle, "\r%% Invalid List of Arguments\r\n");
        }
        else if ($10 != NULL)
        {
            if ($16 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_LEV_VSI, NULL, $7, $11); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_LEV_VSI, NULL, $7, $11); 
            }
        }
        else if ($12 != NULL)
        {
            if ($16 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_LEV_VLAN, NULL, $7, $13); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_LEV_VLAN, NULL, $7, $13); 
            }
        }

        else if ($15 != NULL)
        {
#ifdef PBB_WANTED            
            if ($16 != NULL)
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DEACTIVE_MIP_LEV_ISID, NULL, $7, $15); 
            }
            else
            {
                cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DELETE_MIP_LEV_ISID, NULL, $7, $15); 
            }
#else
            CliPrintf(CliHandle, "\r%% service-instance configuration need PB Module Support \r\n");
            return CLI_FAILURE;
#endif
        }
   }
}

SYNTAX  : no ethernet cfm mip {domain <domain-name> | level <level-id(0-7)>} {service <service-name> | vsi <vsi_id> | vlan <vlan-id/vfi-id> | service-instance  <integer(256-16777214)>} [active]
PRVID   : 15
HELP    : Delete specified Maintenance Intermediate Point (MIP). Active keyword makes MIP to operationally de-active.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
	  ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configuration|
          domain Domain related configuration|
          <string(43)> Domain-name|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service Service type related configuration|
          <string(43)> Service name|
          vsi VSI related configuration|
          vsi_id The range (4100-65535) is for VSI ID |
          vlan VLAN related configuration|
          vlan_vfi_id The range (1-4094) is for VLAN ID and the range (4096 - 65535) is for VFI |
          service-instance Service instance configuration related information|
          (256-16777214) Service instance value|
          active Operational status of mip|
          <CR> Delete specified Maintenance Intermediate Point (MIP). Active keyword makes MIP to operationally de-active.


COMMAND : restrict ethernet cfm mip dynamic evaluation level <integer(0-7)> service <integer>
ACTION  :
{

   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RESTRICT_IMPLICIT_MIP_EVAL,
                         NULL, $7, $9);
}

SYNTAX  : restrict ethernet cfm mip dynamic evaluation level <0-7> service <integer>
PRVID   : 15
HELP    : Restricts the implicit evaluation and creation of MIP.
CXT_HELP: restrict Restricts the feature|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configurationcfm| 
          dynamic Dynamic configuration| 
          evaluation Implicit evaluation related configuration|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service Service type related configuration|
          <integer> Service name|
          <CR> Restricts the implicit evaluation and creation of MIP service.


COMMAND : no restrict ethernet cfm mip dynamic evaluation level <integer (0-7)> service <integer>
ACTION  :
{	
   cli_process_ecfm_config_cmd (CliHandle, 
                                CLI_ECFM_NOT_RESTRICT_IMPLICIT_MIP_EVAL,
                                NULL, $8, $10);
}

SYNTAX  : no restrict ethernet cfm mip dynamic evaluation level <integer (0-7)> service <integer>
PRVID   : 15
HELP    : Clears the restriction on implicit evaluation and creation of MIP.
CXT_HELP: no Disables the configuration / deletes the entry / resets to default value|
          restrict Restricts the feature|
          ethernet Configures Ethernet|
          cfm CFM related configuration|
          mip Maintenance intermediate point related configurationcfm|
          dynamic Dynamic configuration|
          evaluation Implicit evaluation related configuration|
          level Indicates maintenance level for configuration|
          (0-7) List of maintenance value|
          service Service type related configuration|
          <integer> Service name|
          <CR> Clears the restriction on implicit evaluation and creation of MIP.

COMMAND : ethbn [{enable|disable}] [trap {enable|disable}]
ACTION :
    {
        UINT4 u4EthBnSt = ECFM_ETHBN_INVALID_STATUS;
        UINT4 u4EthBnTrapSt = ECFM_ETHBN_INVALID_STATUS;
        if ($1 != NULL)
        {
           u4EthBnSt = ECFM_SNMP_TRUE;
        }
        if ($2 != NULL)
        {
           u4EthBnSt = ECFM_SNMP_FALSE;
        }
        if ($4 != NULL)
        {
           u4EthBnTrapSt = ECFM_SNMP_TRUE;
        }
        if ($5 != NULL)
        {
           u4EthBnTrapSt = ECFM_SNMP_FALSE;
        }
        cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_ETH_BN_TR_STATUS, NULL,
            u4EthBnSt, u4EthBnTrapSt);
     }
SYNTAX : ethbn [{enable|disable}] [trap {enable|disable}]
PRVID : 15
HELP : Configures ETH-BN status and trap status
CXT_HELP : ethbn configure ethbn related information|
           enable Set ethbn status to enable|
           disable Set ethbn status to disable|
           trap Configure trap related information|
           enable Set trap status to enable|
           disable Set trap status to disable|
           <CR> Set ethbn and trap status.

END GROUP

/*************** Y.1731 : MEP Commands ****************/
/*****************************************************************************/
/*                         ECFM MEPCFG COMMANDS                              */
/*****************************************************************************/
DEFINE GROUP: ECFM_MEP_CFG_CMDS

COMMAND : set lowest-priority-defect {all-Defects | mac-Rem-Err-Xcon-Defects |
rem-Err-Xcon-Defects | err-Xcon-Defects | xcon-Defects | noXcon-Defects}
ACTION  :
{
       UINT1 u1SetEcfmLowestPriDefect = 0;

       if ($2 != NULL)
       {
           u1SetEcfmLowestPriDefect = CLI_ECFM_DEF_ALL;
       }
       if ($3 != NULL)
       {
           u1SetEcfmLowestPriDefect = CLI_ECFM_DEF_MAC_REM_ERR_XCON;
       }
       if ($4 != NULL)
       {
           u1SetEcfmLowestPriDefect = CLI_ECFM_DEF_REM_ERR_XCON;
       }
       if ($5 != NULL)
       {
           u1SetEcfmLowestPriDefect = CLI_ECFM_DEF_ERR_XCON;
       }
       if ($6 != NULL)
       {
           u1SetEcfmLowestPriDefect = CLI_ECFM_DEF_XCON;
       }
       if ($7 != NULL)
       {
           u1SetEcfmLowestPriDefect = CLI_ECFM_DEF_NO_XCON;
       }

       cli_process_ecfm_config_cmd (CliHandle, 
                                    CLI_ECFM_SET_MEP_LOWEST_PRI_DEFECT,
                                    NULL, u1SetEcfmLowestPriDefect);
}
SYNTAX : set lowest-priority-defect {all-Defects | mac-Rem-Err-Xcon-Defects |
rem-Err-Xcon-Defects | err-Xcon-Defects | xcon-Defects | noXcon-Defects}
PRVID   : 15
HELP    : Set the MEP lowest priority defect.
CXT_HELP: set Configures the parameters|
          lowest-priority-defect Set the MEP lowest priority defect|
          all-Defects Reports DefRDICCM DefMACstatus DefRemoteCCM DefErrorCCM and DefXconCCM defects|
          mac-Rem-Err-Xcon-Defects Reports only DefMACstatus DefRemoteCCM DefErrorCCM and DefXconCCM defects|
          rem-Err-Xcon-Defects Reports only DefRemoteCCM DefErrorCCM and DefXconCCM defects|
          err-Xcon-Defects Reports only DefErrorCCM and DefXconCCM defects|
          xcon-Defects Reports only DefXconCCM defects|
          noXcon-Defects No defects DefXcon or lower are to be reported|
          <CR> Set the MEP lowest priority defect

COMMAND : set frame delay threshold <integer> 
ACTION  :
{
      cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_FD_THRESHOLD, NULL,
      $4); 
}

SYNTAX  : set frame delay threshold <microseconds(0-4294967295)>
PRVID   : 15
HELP    : Sets the threshold value for the frame delay. Notification is sent to management and registered external modules if the delay exceeds the configured threshold value. 
CXT_HELP: set Configures the parameters|
          frame Frame related configuration|
          delay Time delay configuration|
          threshold Threshold value configuration|
          <integer> Threshold value|
          <CR> Sets the threshold value for the frame delay. Notification is sent to management and registered external modules if the delay exceeds the configured threshold value.

COMMAND : set params {capability {enable | disable} ([ping] [multicast-ping]
[test] [multicast-test] [one-way-frame-delay] [turnaround-delay])}
ACTION  :
{
   UINT4 u4Flag = 0;
   
   if ($3 != NULL)
   {
       u4Flag |= CLI_ECFM_ENABLE_CAP;
   }
   if ($4 != NULL)
   {
       u4Flag |= CLI_ECFM_DISABLE_CAP;
   }
   if ($5 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_PING_CAP;
   }
   if ($6 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_MCAST_PING_RX_CAP;
   }
   if ($7 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_TST_RX_CAP;
   }
   if ($8 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_MCAST_TST_RX_CAP;
   }
   if ($9 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_1WAY_FD_RX_CAP;
   }
   if ($10 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_TX_OPT_FIELDS_DMR_CAP;
   }
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_MEP_CAPABILITY, NULL, u4Flag);
   }

SYNTAX  : set params capability {enable | disable} ([ping] [multicast-ping]
[test] [multicast-test] [one-way-frame-delay] [turnaround-delay])
PRVID   : 15
HELP    : Enables or Disables the MEP capability. 
CXT_HELP: set Configures the parameters|
          params MEP parameter related configuration|
          capability MEP capability configuration|
          enable Enables mep capability|
          disable Disables mep capability|
          ping Configures ping operation|
          multicast-ping Enables the MEP capability to process the multicast LBM|
          test Enables the MEP capability to initiate and process TST operation|
          multicast-test Multicast test frame related configuration|
          one-way-frame-delay Enables the MEP capability to process the one dm frames|
          turnaround-delay  Indicates whether to include optional fields in the DMR Frame or not|
          <CR> Enables or Disables the MEP capability.

COMMAND : set rdi ([{enable | disable}] [period <integer(0-172800)>])
ACTION  :
   {
	if ($3 != NULL)
       {
		cli_process_ecfm_config_cmd (CliHandle,
				CLI_ECFM_DISABLE_RDI_CAP , NULL, $5);
	}
	else if ($2 != NULL)
	{
		cli_process_ecfm_config_cmd (CliHandle,
				CLI_ECFM_ENABLE_RDI_CAP, NULL, $5);
           }
       else
         {         
		cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RDI_PERIOD,
				NULL, $5);
         }
         }
SYNTAX  : set rdi ([{enable | disable}] [period <integer(0-172800)>])
PRVID   : 15
HELP    : Sets the RDI capability and Period of the MEP. 
CXT_HELP: set Configures the parameters|
          rdi Configures transmission of RDI bit|
          enable Enables rdi capability|
          disable Disables rdi capability|
          period RDI period related configuration|
          (0-172800)Interval value|
          <CR> Sets the RDI capability and Period of the MEP.

COMMAND : set csf {enable | disable}
ACTION  :
{
	if ($3 != NULL)
	{
		cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_CSF_CAP , NULL);
	}
	else
	{
		cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_CSF_CAP, NULL);
	}
}
SYNTAX  : set csf {enable | disable}
PRVID   : 15
HELP    : Sets the ETH-CSF capability
CXT_HELP: set Configures the parameters|
          enable Enables ETH-CSF capability|
          disable Disables ETH-CSF capability|
          Sets the ETH-CSF capability on the MEP

COMMAND : set ais ([{enable | disable}] [interval {one-sec | one-min}] [period <integer(0-172800)>])
ACTION  :
{
	UINT4 u4Interval = 0;
	if ($5 != NULL)
         {
		u4Interval= CLI_ECFM_CC_AIS_LCK_INTERVAL_1_SEC;
         }
	else if ($6 != NULL)
       {
		u4Interval= CLI_ECFM_CC_AIS_LCK_INTERVAL_1_MIN;
       }
	if ($2 != NULL)
   {
		cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_ENABLE_AIS_CAP,
				NULL, $8, u4Interval);
   }
	else if ($3 != NULL)
	{
		cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_DISABLE_AIS_CAP,
				NULL, $8, u4Interval);
}
	else
	{
		cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_CONF_AIS_PARAMS,
				NULL, $8, u4Interval);
	}
}
SYNTAX  : set ais ([{enable | disable}] [interval {one-sec | one-min}] [period <integer(0-172800)>])
PRVID   : 15
HELP    : Sets the AIS capability on the Mep and also sets the AIS-Interval and AIS-Period.
CXT_HELP: set Configures the parameters|
          ais Sets the AIS capability on the Mep and also sets the AIS-Interval and AIS-Period|
          enable Enables ais capability |
          disable Disables ais capability|
          interval Time interval related configuration|
          one-sec Value is represented in seconds|
          one-min Value is represented in minutes|
          period AIS period related configuration|
          (0-172800) Interval value|
          <CR> Sets the AIS capability on the Mep and also sets the AIS-Interval and AIS-Period.
         

COMMAND : set ccm-mac ({multicast | unicast <ucast_mac>})
ACTION  :
{
   if (($2 != NULL))
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_CCM_MULTICAST_MAC , NULL); 
   }
   else
  {
      cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_CCM_UNICAST_MAC, NULL,
      $4);
   }
}

SYNTAX  : set ccm-mac ({multicast | unicast <aa:aa:aa:aa:aa:aa>})
PRVID   : 15
HELP    : Sets the destination mac-address for the Continuity Check Messages. Multicast Mac Address will be set according to the level of MEP.
CXT_HELP: set Configures the parameters|
          ccm-mac CCM mac address related configuration|
          multicast Sends multicast mac address to mep|
          unicast Unicast mac address configuration|
          <aa:aa:aa:aa:aa:aa> Unicast mac address|
          <CR> Sets the destination mac-address for the Continuity Check Messages. Multicast Mac Address will be set according to the level of MEP.

COMMAND : set client-layer-mac ais {multicast | unicast <ucast_mac>} [lck {multicast | unicast <ucast_mac>}]
ACTION  :
{
   if (($2 != NULL) && ($6 != NULL))
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_AIS_LCK_CLNT_MAC, NULL,
                                    $5, $9); 
   }
   if (($2 != NULL) && ($6 == NULL))
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_AIS_CLNT_MAC, NULL,
                                    $5); 
   }
}
SYNTAX  : set client-layer-mac ais {multicast | unicast <aa:aa:aa:aa:aa:aa>} [lck {multicast | unicast <aa:aa:aa:aa:aa:aa>}]
PRVID   : 15
HELP    : Sets the client layer mac-address for the AIS and/or LCK messages. 
CXT_HELP: set Configures the parameters|
          client-layer-mac Client layer mac address related configuration|
          ais Configures transmission of AIS frames|
          multicast Sends multicast mac address to mep|
          unicast Unicast mac address configuration|
          <aa:aa:aa:aa:aa:aa> Unicast mac address|
          lck Lock message related configuration| 
          multicast Multicast frame related configuration|
          unicast Unicast mac address configuration|
          <aa:aa:aa:aa:aa:aa> Unicast mac address|
          <CR> Sets the client layer mac-address for the AIS and/or LCK messages.
          
COMMAND : set client-layer-mac lck {multicast | unicast <ucast_mac>}
ACTION  :
{
   if ($2 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_LCK_CLNT_MAC, NULL,
                                    $5);
   }
}
SYNTAX  : set client-layer-mac lck {multicast | unicast <aa:aa:aa:aa:aa:aa>}
PRVID   : 15
HELP    : Sets the client layer mac-address for the AIS and/or LCK messages.
CXT_HELP: set Configures the parameters|
          client-layer-mac Client layer mac address related configuration|
          lck Lock message related configuration|
          multicast Multicast frame related configuration|
          unicast Unicast mac address related configuration|
          <aa:aa:aa:aa:aa:aa> Unicast mac address|
          <CR> Sets the client layer mac-address for the AIS and/or LCK messages.

COMMAND : set frame loss threshold ([near-end <integer>] [far-end <integer>])
ACTION  :
{ 
   cli_process_ecfm_config_cmd (CliHandle,
                                CLI_ECFM_SET_LOSS_THRESHOLD, NULL, $5, $7);
}

SYNTAX  : set frame loss threshold ([near-end <num_of_frames(0-4294967295)>]
[far-end <num_of_frames(0-4294967295)>])
PRVID   : 15
HELP    : Sets the threshold values for near-end and far-end frame loss. Notification is sent to management and registered external modules if the loss exceeds the configured threshold.
CXT_HELP: set Configures the parameters|
          frame Frame related configuration|
          loss Frame loss related configuration|
          threshold Threshold value configuration|
          near-end Information related to near end frame loss|
          <integer> Number of near end frames|
          far-end Information related to far end frame loss|
          <integer> Number of far end frames|
          <CR> Sets the threshold values for near-end and far-end frame loss. Notification is sent to management and registered external modules if the loss exceeds the configured threshold.

COMMAND : set out-of-service {enable | disable} [interval {one-sec |
one-min}] [period <integer(0-172800)>] [delay <integer(1-10)>]
ACTION  :
{
   UINT4 u4Flag = 0;
   if ($5 != NULL)
   {
     u4Flag |= CLI_ECFM_SET_AIS_LCK_INT_1SEC;      
   }
   else if ($6 != NULL)
   {
     u4Flag |= CLI_ECFM_SET_AIS_LCK_INT_1MIN;          
   }   
   if ($2 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_OUT_OF_SERVICE,
       NULL, $8, $10, u4Flag); 
   }
   else if ($3 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_RESET_OUT_OF_SERVICE,
       NULL, $8, $10, u4Flag); 
   }
}

SYNTAX  : set out-of-service {enable | disable} [interval {one-sec |
one-min}] [period <seconds(0-172800)>] [delay <milliseconds(1-10)>]
PRVID   : 15
HELP    : Enables or disables the MEP to perform Out-Of-Service operations. LCK interval, period and delay can also be configured.
CXT_HELP: set Configures the parameters|
          out-of-service Out of service related configuration|
          enable Enables mep to perform out of service operation|
          disable Disables mep to perform out of service operation|
          interval Time interval related configuration|
          one-sec Value is represented in seconds|
          one-min Value is represented in minutes|
          period Out of service period related configuration|
          (0-172800) Out of service period|
          delay Delay for enabling out of service operation|
          (1-10) Delay time|
          <CR> Enables or disables the MEP to perform Out-Of-Service operations, Default value is disable. LCK interval, period and delay can also be configured. Default values of LCK interval is one-sec and for delay is 1 MS.

#if defined (Y1564_WANTED) || (RFC2544_WANTED)
COMMAND : set ethernet cfm loopback {enable | disable}
ACTION  :
{
   if ($4 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_MEP_LOOPBACK_STATUS, NULL,
                                    ECFM_ENABLE);
   }
   else if ($5 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_MEP_LOOPBACK_STATUS, NULL,
                                    ECFM_DISABLE);
   }
}

SYNTAX  : set ethernet cfm loopback {enable | disable}
PRVID   : 15
HELP    : Enables or Disables the Loopback on the remote MEP.
CXT_HELP: set configures the parameters|
          ethernet Ethernet related configuration|
          cfm CFM related configuration|
          loopback Loopback related configuration|
          enable Enables CFM loopback|
          disable Disables CFM loopback|
          <CR> Enables or Disables the Loopback on the remote MEP.
#endif

COMMAND : set drop-eligibility {enable | disable} all
ACTION  :
{
   UINT4   u4Flag = 0;
   if ($4 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_ALL;
   }   

   if ($2 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_DROP_ELIGIBILITY, NULL,
                                    ECFM_ENABLE, u4Flag);
   }
   else
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_DROP_ELIGIBILITY, NULL,
                                    ECFM_DISABLE, u4Flag);
   }
}

SYNTAX  : set drop-eligibility {enable | disable} all
PRVID   : 15
HELP    : Sets the drop-eligibility of the various CFM PDUs to be transmitted by the MEP.
CXT_HELP: set configures the parameters|
          drop-eligibility Drop-Eligibility related configuration|
          enable Enables drop eligibility of CFM PDU|
          disable Disables drop eligibility of CFM PDU|
          all All protocols|
          <CR> Sets the drop-eligibility of the various CFM PDUs to be transmitted by the MEP.

COMMAND : set drop-eligibility {enable | disable} {[ccm] [lbm] [ltm]
[one-dm] [dmm] [lmm] [tst] [ais] [lck] [availability] }
ACTION  :
{
   UINT4   u4Flag = 0;
   if ($4 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_CCM;
   }
   if ($5 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LBM;
   }
   if ($6 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LTM;
   }
   if ($7 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_1DM;
   }
   if ($8 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_DMM;
   }
   if ($9 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LMM;
   }
   if ($10 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_TST;
   }
   if ($11 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_AIS;
   }
   if ($12 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LCK;
   }
   if ($13 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_AVLBLTY;
   }
 
   if ($2 != NULL)
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_DROP_ELIGIBILITY, NULL,
                                    ECFM_ENABLE, u4Flag); 
   }
   else
   {
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_DROP_ELIGIBILITY, NULL,
                                    ECFM_DISABLE, u4Flag); 
   }
}

SYNTAX  : set drop-eligibility {enable | disable} {[ccm] [lbm] [ltm]
[one-dm] [dmm] [lmm] [tst] [ais] [lck] [availability]}
PRVID   : 15
HELP    : Sets the drop-eligibility of the various CFM PDUs to be transmitted by the MEP. 
CXT_HELP: set configures the parametes|
          drop-eligibility|
          enable Enables drop eligibility of CFM PDU|
          disable Disables drop eligibility of CFM PDU|
          ccm Continuity check message related configuration|
          lbm Loopback message related configuration|
          ltm Link trace message related configuration| 
          one-dm One way delay management related configuration|
          dmm Delay measurement signal related configuration|
          lmm Frame loss measurement related configuration|
          tst Multicast test signal related configuration|
          ais Alarm Indication Signal related configuration|
          lck Lock related configuration|
          availability Availability related configuration|
          <CR> Sets the drop-eligibility of the various CFM PDUs to be transmitted by the MEP.


COMMAND : set vlan-priority all <integer(0-7)>
ACTION  :
{
   UINT4   u4Flag = 0;
   if ($2 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_ALL;
       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_VLAN_PRIORITY,
                                    NULL, u4Flag, $3, $3, $3, $3, $3, $3, $3,
                                    $3, $3, $3, $3); 
   }
}

SYNTAX  : set vlan-priority all <priority(0-7)>
PRVID   : 15
HELP    : Sets the vlan priority of the various CFM PDUs to be transmitted by the MEP. When operating in IEEE 802.1ag mode, setting ccm or ltm priority will result in setting the priority for both CCM and LTM.
CXT_HELP: set Configures the parameters|
          vlan-priority VLAN priority related configuration|
          all All Protocols|
          (0-7)All priority value|
         <CR> Sets the vlan priority of the various CFM PDUs to be transmitted by the MEP. When operating in IEEE 802.1ag mode, setting ccm or ltm priority will result in setting the priority for both CCM and LTM.

COMMAND : set vlan-priority {[ccm <integer(0-7)>] [lbm
<integer(0-7)>] [ltm <integer(0-7)>] [one-dm <integer(0-7)>] [dmm <integer(0-7)>]
[lmm <integer(0-7)>] [tst <integer(0-7)>] [ais <integer(0-7)>] [lck
<integer(0-7)>] [availability <integer(0-7)>]}
ACTION  :
   {
   UINT4   u4Flag = 0;
   if ($2 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_CCM;
       }
   if ($4 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LBM;
       }
   if ($6 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LTM;
       }
   if ($8 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_1DM;
       }
   if ($10 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_DMM;
       }
   if ($12 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LMM;
       }
   if ($14 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_TST;
       }
   if ($16 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_AIS;
       }
   if ($18 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LCK;
       }
   if ($20 != NULL)
       {
           u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_AVLBLTY;
       }

       cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_VLAN_PRIORITY,
                                NULL, u4Flag, NULL, $3, $5, $7, $9, $11, $13,
                                $15, $17, $19, $21);
}

SYNTAX  : set vlan-priority {[all <priority(0-7)>] [lbm
<priority(0-7)>] [ltm <priority(0-7)>] [one-dm <priority(0-7)>] [dmm <priority(0-7)>]
[lmm <priority(0-7)>] [tst <integer(0-7)>] [ais <integer(0-7)>] [lck
<integer(0-7)>] [availability <integer(0-7)>]}
PRVID   : 15
HELP    : Sets the vlan priority of the various CFM PDUs to be transmitted by the MEP. When operating in IEEE 802.1ag mode, setting ccm or ltm priority will result in setting the priority for both CCM and LTM.
CXT_HELP: set Configures the parameters|
          vlan-priority VLAN priority related configuration|
          ccm CCM priority level configuration|
          (0-7) CCM priority value|
          lbm LBM priority level configuration|
          (0-7) LBM priority value|
          ltm LTM priority level configuration|
          (0-7) LTM priority value|
          one-dm one dm priority level configuration|
          (0-7) DM priority value|
          dmm DMM priority level configuration|
          (0-7) DMM priority value|
          lmm LMM priority level configuration|
          (0-7) LMM  priority value|
          tst TST priority level configuration|
          (0-7) TST priority value|
          ais AIS related configuration|
          (0-7) AIS priority value|
          lck LCK related configuration|
          (0-7) LCK priority value|
          availability AVAILABILITY related configuration|
          (0-7) LCK priority value|
         <CR> Sets the vlan priority of the various CFM PDUs to be transmitted by the MEP. When operating in IEEE 802.1ag mode, setting ccm or ltm priority will result in setting the priority for both CCM and LTM.
         
#ifdef PBB_WANTED
COMMAND : set service-instance-priority all <integer(0-7)>
ACTION  :
{
   UINT4   u4Flag = 0;
   if ($2 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_ALL;
   }   

   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_VLAN_PRIORITY, NULL,
                                u4Flag, $3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                               NULL, NULL);
}
SYNTAX  : set service-instance-priority all <priority(0-7)>
PRVID   : 15
HELP    : Sets the service instance priority of the various CFM PDUs to be transmitted by the MEP.
CXT_HELP: set Configures the parameters|
          service-instance-priority Service-instance priorty related configuration|
          all All protocols|
          (0-7) All priority value|
           <CR> Sets the service instance priority of the various CFM PDUs to be transmitted by the MEP.

COMMAND : set service-instance-priority {[ccm <integer(0-7)>] [lbm
<integer(0-7)>] [ltm <integer(0-7)>] [one-dm <integer(0-7)>] [dmm <integer(0-7)>]
[lmm <integer(0-7)>] [tst <integer(0-7)>] [ais <integer(0-7)>] [lck
<integer(0-7)>] [availability <integer(0-7)>]}
ACTION  :
{
   UINT4   u4Flag = 0;
   if ($2 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_CCM;
   }
   if ($4 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LBM;
   }
   if ($6 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LTM;
   }
   if ($8 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_1DM;
   }
   if ($10 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_DMM;
   }
   if ($12 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LMM;
   }
   if ($14 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_TST;
   }
   if ($16 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_AIS;
   }
   if ($18 != NULL)
   {
      u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_LCK;
   }
   if ($20 != NULL)
   {
       u4Flag |= CLI_ECFM_SET_VLAN_PARAMS_AVLBLTY;
   }
 
   cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_VLAN_PRIORITY, NULL,
                                u4Flag, NULL, $3, $5, $7, $9, $11, $13, $15, $17, $19,
                                $21, $23); 
}
SYNTAX  : set service-instance-priority {[ccm <priority(0-7)>] [lbm
<priority(0-7)>] [ltm <priority(0-7)>] [one-dm <priority(0-7)>] [dmm <priority(0-7)>]
[lmm <priority(0-7)>] [tst <integer(0-7)>] [ais <integer(0-7)>] [lck
<integer(0-7)>] [availability <integer(0-7)>]}
PRVID   : 15
HELP    : Sets the service instance priority of the various CFM PDUs to be transmitted by the MEP. 
CXT_HELP: set Configures the parameters|
          service-instance-priority Indicates a service-instance priorty for the configuration|
          ccm CCM priority level configuration|
          (0-7) CCM priority value|
          lbm LBM priority level configuration|
          (0-7) LBM priority value|
          ltm  LTM priority level configuration|
          (0-7) LTM priority value|
          one-dm DM priority level configuration|
          (0-7) DM priority value|
          dmm DMM priority level configuration|
          (0-7) DMM priority value|
          lmm LMM priority level configuration|
          (0-7) LMM  priority value|
          tst TST priority level configuration|
          (0-7) TST priority value|
          ais AIS related configuration|
          (0-7) AIS priority value|
          lck LCK related configuration|
          (0-7) LCK priority value|
          availability AVAILABILITY related configuration|
          (0-7) LCK priority value|
           <CR> Sets the service instance priority of the various CFM PDUs to be transmitted by the MEP.
#endif           

COMMAND : set one-dm-transaction-interval <integer(0-15000)> 
ACTION  :
{
      cli_process_ecfm_config_cmd (CliHandle, CLI_ECFM_SET_DM_TRANS_INTERVAL, NULL,
      $2); 
}

SYNTAX  : set one-dm-transaction-interval <milliseconds(0-15000)>
PRVID   : 15
HELP    : Sets the time interval between two successive one-way frame delay transactions.
CXT_HELP: set Configures the parameters|
          one-dm-transaction-interval DM priority level configuration|
          (0-15000) Time interval value|
          <CR> Sets the time interval between two successive one-way frame delay transactions.


COMMAND : exit
ACTION  :
	{
        UINT4       u4PromptIfIndex = 0;
        u4PromptIfIndex = CLI_GET_IFINDEX ();
		CLI_SET_IFINDEX (u4PromptIfIndex);
		CliChangePath ("..");
	}
 SYNTAX : exit
  PRVID : 15
   HELP : exit to interface mode.
CXT_HELP: exit Exit to global configuration mode|
          <CR> Exits to interface mode.

COMMAND : set ethernet cfm Offload {enable | disable }
ACTION  :
	{
         if ($4!= NULL)
         {
             cli_process_ecfm_config_cmd
             (CliHandle,CLI_ECFM_SET_CCM_OFFLOAD_MEP_ENABLE, NULL);
         }
         else
         {
           cli_process_ecfm_config_cmd
           (CliHandle,CLI_ECFM_SET_CCM_OFFLOAD_MEP_DISABLE, NULL);
         }
	}
 SYNTAX : set ethernet cfm Offload {enable | disable }
  PRVID : 15
   HELP : Enables or Disables the CCM-Offloading on the MEP.
CXT_HELP: set Configures the parameters|
          ethernet Ethernet related configuration|
          cfm CFM related configuration|
          Offload CCM offload related configuration|
          enable Enables CFM offloading. [Not Applicable for LAGG Ports]|
          disable Disables CFM offloading|
          <CR> Enables or Disables the CCM-Offloading on the MEP.

COMMAND : set alarm delay <integer(250-1000)>
ACTION  :
	{
        cli_process_ecfm_config_cmd
            (CliHandle, CLI_ECFM_FNG_SET_ALARMTIME, NULL, $3);
	}
 SYNTAX : set alarm delay <integer(250-1000)> 
  PRVID : 15
   HELP : Sets the time that defects must be present before a Fault Alarm
          is issued. The default value is 2.5sec.
CXT_HELP: set Configures the parameters|
          alarm fault notification alarm|
          delay sets the alarm time|
          integer(250-1000) measured in units of 0.01 seconds|
          <CR> Set the fault alarm time.

COMMAND : set alarm reset <integer(250-1000)>
ACTION  :
	{
        cli_process_ecfm_config_cmd
            (CliHandle, CLI_ECFM_FNG_SET_RESETTIME, NULL, $3);
	}
 SYNTAX : set alarm reset <integer(250-1000)> 
  PRVID : 15
   HELP : Sets the time that defects must be absent before re-enabling
          a Fault Alarm. The default value is 10sec.
CXT_HELP: set Configures the parameters|
          alarm fault notification alarm|
          reset sets the reset time|
          integer(250-1000) measured in units of 0.01 seconds|
          <CR> Set the fault alarm reset time.
END GROUP

/*---------------------------------------------------------------------------*/
/*                         End of the file cfmcmd.def                     */
/*---------------------------------------------------------------------------*/

